-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.4 from SLParse.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Stm                                (0)
	%start_parse -> Stm                                (1)
	Stm -> Stm ';' Stm                                 (2)
	Stm -> identifier '=' Exp                          (3)
	Stm -> print '(' ExpList ')'                       (4)
	Exp -> identifier                                  (5)
	Exp -> integer                                     (6)
	Exp -> Exp '+' Exp                                 (7)
	Exp -> Exp '-' Exp                                 (8)
	Exp -> Exp '*' Exp                                 (9)
	Exp -> Exp '/' Exp                                 (10)
	Exp -> '(' Stm ',' Exp ')'                         (11)
	ExpList -> Exp                                     (12)
	ExpList -> Exp ',' ExpList                         (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { LPar _ }
	')'            { RPar _ }
	print          { Print _ }
	'='            { Assign _ }
	'+'            { SLTokens.OpPlus _ }
	'-'            { SLTokens.OpMinus _ }
	'*'            { SLTokens.OpTimes _ }
	'/'            { SLTokens.OpDivide _ }
	','            { Comma _ }
	';'            { Semicol _ }
	integer        { IVal $$ _ }
	identifier     { Id $$ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	%start_parse    rule  1
	Stm             rules 2, 3, 4
	Exp             rules 5, 6, 7, 8, 9, 10, 11
	ExpList         rules 12, 13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	print          shift, and enter state 4
	identifier     shift, and enter state 5

	Stm            goto state 7

State 1


	print          shift, and enter state 4
	identifier     shift, and enter state 5

	Stm            goto state 6

State 2


	print          shift, and enter state 4
	identifier     shift, and enter state 5

	Stm            goto state 3

State 3

	Stm -> Stm . ';' Stm                                (rule 2)

	';'            shift, and enter state 8


State 4

	Stm -> print . '(' ExpList ')'                      (rule 4)

	'('            shift, and enter state 10


State 5

	Stm -> identifier . '=' Exp                         (rule 3)

	'='            shift, and enter state 9


State 6

	%start_parse -> Stm .                               (rule 1)
	Stm -> Stm . ';' Stm                                (rule 2)

	';'            shift, and enter state 8
	%eof           accept


State 7

	%start_parse -> Stm .                               (rule 0)
	Stm -> Stm . ';' Stm                                (rule 2)

	';'            shift, and enter state 8
	%eof           accept


State 8

	Stm -> Stm ';' . Stm                                (rule 2)

	print          shift, and enter state 4
	identifier     shift, and enter state 5

	Stm            goto state 17

State 9

	Stm -> identifier '=' . Exp                         (rule 3)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 16

State 10

	Stm -> print '(' . ExpList ')'                      (rule 4)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 11
	ExpList        goto state 12

State 11

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)
	ExpList -> Exp .                                    (rule 12)
	ExpList -> Exp . ',' ExpList                        (rule 13)

	')'            reduce using rule 12
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	','            shift, and enter state 24


State 12

	Stm -> print '(' ExpList . ')'                      (rule 4)

	')'            shift, and enter state 23


State 13

	Exp -> '(' . Stm ',' Exp ')'                        (rule 11)

	print          shift, and enter state 4
	identifier     shift, and enter state 5

	Stm            goto state 22

State 14

	Exp -> integer .                                    (rule 6)

	')'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	','            reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 15

	Exp -> identifier .                                 (rule 5)

	')'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 16

	Stm -> identifier '=' Exp .                         (rule 3)
	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	','            reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 17

	Stm -> Stm . ';' Stm                                (rule 2)
	Stm -> Stm ';' Stm .                                (rule 2)

	','            reduce using rule 2
	';'            shift, and enter state 8
	%eof           reduce using rule 2


State 18

	Exp -> Exp '+' . Exp                                (rule 7)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 30

State 19

	Exp -> Exp '-' . Exp                                (rule 8)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 29

State 20

	Exp -> Exp '*' . Exp                                (rule 9)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 28

State 21

	Exp -> Exp '/' . Exp                                (rule 10)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 27

State 22

	Stm -> Stm . ';' Stm                                (rule 2)
	Exp -> '(' Stm . ',' Exp ')'                        (rule 11)

	','            shift, and enter state 26
	';'            shift, and enter state 8


State 23

	Stm -> print '(' ExpList ')' .                      (rule 4)

	','            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 24

	ExpList -> Exp ',' . ExpList                        (rule 13)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 11
	ExpList        goto state 25

State 25

	ExpList -> Exp ',' ExpList .                        (rule 13)

	')'            reduce using rule 13


State 26

	Exp -> '(' Stm ',' . Exp ')'                        (rule 11)

	'('            shift, and enter state 13
	integer        shift, and enter state 14
	identifier     shift, and enter state 15

	Exp            goto state 31

State 27

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)
	Exp -> Exp '/' Exp .                                (rule 10)

	')'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 28

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp '*' Exp .                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)

	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	','            reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 29

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp '-' Exp .                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)

	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	','            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 30

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp '+' Exp .                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)

	')'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	','            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 31

	Exp -> Exp . '+' Exp                                (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 9)
	Exp -> Exp . '/' Exp                                (rule 10)
	Exp -> '(' Stm ',' Exp . ')'                        (rule 11)

	')'            shift, and enter state 32
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21


State 32

	Exp -> '(' Stm ',' Exp ')' .                        (rule 11)

	')'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 12
Number of non-terminals: 5
Number of states: 33
