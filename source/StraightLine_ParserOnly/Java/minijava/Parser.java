
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Aug 03 08:55:27 CEST 2017
//----------------------------------------------------

package minijava;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import minijava.syntax.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu Aug 03 08:55:27 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\003\004\000\002\004" +
    "\023\000\002\005\010\000\002\005\012\000\002\006\002" +
    "\000\002\006\004\000\002\007\005\000\002\010\002\000" +
    "\002\010\004\000\002\011\017\000\002\011\016\000\002" +
    "\012\002\000\002\012\004\000\002\013\004\000\002\013" +
    "\006\000\002\014\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\005\000\002\015\011\000" +
    "\002\015\007\000\002\015\007\000\002\015\012\000\002" +
    "\015\006\000\002\015\011\000\002\016\002\000\002\016" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\006\000\002\017\005\000\002\017\010\000\002" +
    "\017\007\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\007" +
    "\000\002\017\006\000\002\017\004\000\002\017\005\000" +
    "\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\033\006\001\002\000\004\002\236\001" +
    "\002\000\006\002\ufffc\033\153\001\002\000\004\004\007" +
    "\001\002\000\004\014\010\001\002\000\004\034\011\001" +
    "\002\000\004\035\012\001\002\000\004\036\013\001\002" +
    "\000\004\037\014\001\002\000\004\016\015\001\002\000" +
    "\004\010\016\001\002\000\004\012\017\001\002\000\004" +
    "\013\020\001\002\000\004\004\021\001\002\000\004\017" +
    "\022\001\002\000\004\014\023\001\002\000\016\004\026" +
    "\014\024\023\030\025\027\026\032\027\025\001\002\000" +
    "\020\004\026\014\024\015\uffe6\023\030\025\027\026\032" +
    "\027\025\001\002\000\004\016\137\001\002\000\006\012" +
    "\127\050\126\001\002\000\004\016\122\001\002\000\004" +
    "\016\114\001\002\000\004\015\112\001\002\000\004\016" +
    "\033\001\002\000\022\004\042\005\034\016\043\031\041" +
    "\032\035\051\036\052\040\053\044\001\002\000\032\012" +
    "\uffda\013\uffda\017\uffda\020\uffda\021\uffda\022\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\001\002\000" +
    "\006\004\104\011\103\001\002\000\032\012\uffd9\013\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000\024\012\053" +
    "\017\101\022\055\042\046\043\051\044\047\045\050\046" +
    "\054\047\052\001\002\000\032\012\uffd8\013\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\001\002\000\032\012\uffd6\013\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\001\002\000\032\012\uffd7" +
    "\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002\000\022" +
    "\004\042\005\034\016\043\031\041\032\035\051\036\052" +
    "\040\053\044\001\002\000\022\004\042\005\034\016\043" +
    "\031\041\032\035\051\036\052\040\053\044\001\002\000" +
    "\032\012\053\013\uffd3\017\uffd3\020\uffd3\021\uffd3\022\055" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001" +
    "\002\000\022\004\042\005\034\016\043\031\041\032\035" +
    "\051\036\052\040\053\044\001\002\000\022\004\042\005" +
    "\034\016\043\031\041\032\035\051\036\052\040\053\044" +
    "\001\002\000\022\004\042\005\034\016\043\031\041\032" +
    "\035\051\036\052\040\053\044\001\002\000\022\004\042" +
    "\005\034\016\043\031\041\032\035\051\036\052\040\053" +
    "\044\001\002\000\022\004\042\005\034\016\043\031\041" +
    "\032\035\051\036\052\040\053\044\001\002\000\022\004" +
    "\042\005\034\016\043\031\041\032\035\051\036\052\040" +
    "\053\044\001\002\000\022\004\042\005\034\016\043\031" +
    "\041\032\035\051\036\052\040\053\044\001\002\000\006" +
    "\004\057\030\056\001\002\000\032\012\uffdd\013\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\001\002\000\004\016\060\001" +
    "\002\000\024\004\042\005\034\016\043\017\063\031\041" +
    "\032\035\051\036\052\040\053\044\001\002\000\026\012" +
    "\053\017\uffd1\020\uffd1\022\055\042\046\043\051\044\047" +
    "\045\050\046\054\047\052\001\002\000\006\017\065\020" +
    "\064\001\002\000\032\012\uffdb\013\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\001\002\000\022\004\042\005\034\016\043" +
    "\031\041\032\035\051\036\052\040\053\044\001\002\000" +
    "\032\012\uffdc\013\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\001" +
    "\002\000\026\012\053\017\uffd0\020\uffd0\022\055\042\046" +
    "\043\051\044\047\045\050\046\054\047\052\001\002\000" +
    "\032\012\053\013\uffe0\017\uffe0\020\uffe0\021\uffe0\022\055" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\001" +
    "\002\000\024\012\053\013\071\022\055\042\046\043\051" +
    "\044\047\045\050\046\054\047\052\001\002\000\032\012" +
    "\uffde\013\uffde\017\uffde\020\uffde\021\uffde\022\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\001\002\000" +
    "\032\012\053\013\uffdf\017\uffdf\020\uffdf\021\uffdf\022\055" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\001" +
    "\002\000\032\012\053\013\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\055\042\uffe3\043\uffe3\044\047\045\050\046\054\047" +
    "\052\001\002\000\032\012\053\013\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\055\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\054\047\052\001\002\000\032\012\053\013\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\055\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\054\047\052\001\002\000\032\012\053\013\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\055\042\uffe4\043\051\044" +
    "\047\045\050\046\054\047\052\001\002\000\024\012\053" +
    "\017\100\022\055\042\046\043\051\044\047\045\050\046" +
    "\054\047\052\001\002\000\032\012\uffd2\013\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\001\002\000\004\021\102\001\002" +
    "\000\024\004\uffea\014\uffea\015\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\041\uffea\001\002\000\004\012\107" +
    "\001\002\000\004\016\105\001\002\000\004\017\106\001" +
    "\002\000\032\012\uffd4\013\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\001\002\000\022\004\042\005\034\016\043\031\041" +
    "\032\035\051\036\052\040\053\044\001\002\000\024\012" +
    "\053\013\111\022\055\042\046\043\051\044\047\045\050" +
    "\046\054\047\052\001\002\000\032\012\uffd5\013\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\001\002\000\004\015\113\001" +
    "\002\000\006\002\uffff\033\uffff\001\002\000\022\004\042" +
    "\005\034\016\043\031\041\032\035\051\036\052\040\053" +
    "\044\001\002\000\024\012\053\017\116\022\055\042\046" +
    "\043\051\044\047\045\050\046\054\047\052\001\002\000" +
    "\016\004\026\014\024\023\030\025\027\026\032\027\025" +
    "\001\002\000\004\024\120\001\002\000\016\004\026\014" +
    "\024\023\030\025\027\026\032\027\025\001\002\000\024" +
    "\004\uffec\014\uffec\015\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\041\uffec\001\002\000\022\004\042\005\034" +
    "\016\043\031\041\032\035\051\036\052\040\053\044\001" +
    "\002\000\024\012\053\017\124\022\055\042\046\043\051" +
    "\044\047\045\050\046\054\047\052\001\002\000\016\004" +
    "\026\014\024\023\030\025\027\026\032\027\025\001\002" +
    "\000\024\004\uffeb\014\uffeb\015\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\041\uffeb\001\002\000\022\004\042" +
    "\005\034\016\043\031\041\032\035\051\036\052\040\053" +
    "\044\001\002\000\022\004\042\005\034\016\043\031\041" +
    "\032\035\051\036\052\040\053\044\001\002\000\024\012" +
    "\053\013\131\022\055\042\046\043\051\044\047\045\050" +
    "\046\054\047\052\001\002\000\004\050\132\001\002\000" +
    "\022\004\042\005\034\016\043\031\041\032\035\051\036" +
    "\052\040\053\044\001\002\000\024\012\053\021\134\022" +
    "\055\042\046\043\051\044\047\045\050\046\054\047\052" +
    "\001\002\000\024\004\uffe7\014\uffe7\015\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\041\uffe7\001\002\000\024" +
    "\012\053\021\136\022\055\042\046\043\051\044\047\045" +
    "\050\046\054\047\052\001\002\000\024\004\uffe8\014\uffe8" +
    "\015\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\041" +
    "\uffe8\001\002\000\004\016\140\001\002\000\004\007\141" +
    "\001\002\000\004\017\142\001\002\000\022\004\042\005" +
    "\034\016\043\031\041\032\035\051\036\052\040\053\044" +
    "\001\002\000\024\012\053\017\144\022\055\042\046\043" +
    "\051\044\047\045\050\046\054\047\052\001\002\000\004" +
    "\021\145\001\002\000\024\004\uffe9\014\uffe9\015\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\041\uffe9\001\002" +
    "\000\004\015\151\001\002\000\022\004\026\014\024\015" +
    "\uffe6\023\030\025\027\026\032\027\025\041\uffe6\001\002" +
    "\000\006\015\uffe5\041\uffe5\001\002\000\024\004\uffed\014" +
    "\uffed\015\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\041\uffed\001\002\000\006\002\ufffc\033\153\001\002\000" +
    "\004\004\155\001\002\000\004\002\000\001\002\000\006" +
    "\014\156\040\157\001\002\000\014\004\ufff9\006\ufff9\011" +
    "\ufff9\015\ufff9\034\ufff9\001\002\000\004\004\160\001\002" +
    "\000\004\014\161\001\002\000\014\004\ufff9\006\ufff9\011" +
    "\ufff9\015\ufff9\034\ufff9\001\002\000\014\004\170\006\171" +
    "\011\167\015\ufff5\034\172\001\002\000\004\004\230\001" +
    "\002\000\004\015\227\001\002\000\006\015\ufff5\034\172" +
    "\001\002\000\030\004\ufff8\006\ufff8\011\ufff8\014\ufff8\015" +
    "\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8\034\ufff8\041\ufff8" +
    "\001\002\000\006\004\uffef\012\224\001\002\000\004\004" +
    "\uffee\001\002\000\004\004\ufff0\001\002\000\010\004\170" +
    "\006\171\011\167\001\002\000\004\004\174\001\002\000" +
    "\004\016\175\001\002\000\012\004\170\006\171\011\167" +
    "\017\177\001\002\000\004\017\214\001\002\000\004\014" +
    "\204\001\002\000\004\004\201\001\002\000\006\017\ufff3" +
    "\020\202\001\002\000\010\004\170\006\171\011\167\001" +
    "\002\000\004\017\ufff2\001\002\000\024\004\ufff9\006\ufff9" +
    "\011\ufff9\014\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\041" +
    "\ufff9\001\002\000\024\004\206\006\171\011\167\014\024" +
    "\023\030\025\027\026\032\027\025\041\uffe6\001\002\000" +
    "\010\004\uffee\012\127\050\126\001\002\000\004\041\210" +
    "\001\002\000\022\004\042\005\034\016\043\031\041\032" +
    "\035\051\036\052\040\053\044\001\002\000\024\012\053" +
    "\021\212\022\055\042\046\043\051\044\047\045\050\046" +
    "\054\047\052\001\002\000\004\015\213\001\002\000\006" +
    "\015\ufff6\034\ufff6\001\002\000\004\014\215\001\002\000" +
    "\024\004\ufff9\006\ufff9\011\ufff9\014\ufff9\023\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\041\ufff9\001\002\000\024\004\206\006" +
    "\171\011\167\014\024\023\030\025\027\026\032\027\025" +
    "\041\uffe6\001\002\000\004\041\220\001\002\000\022\004" +
    "\042\005\034\016\043\031\041\032\035\051\036\052\040" +
    "\053\044\001\002\000\024\012\053\021\222\022\055\042" +
    "\046\043\051\044\047\045\050\046\054\047\052\001\002" +
    "\000\004\015\223\001\002\000\006\015\ufff7\034\ufff7\001" +
    "\002\000\004\013\225\001\002\000\004\004\ufff1\001\002" +
    "\000\004\015\ufff4\001\002\000\006\002\ufffd\033\ufffd\001" +
    "\002\000\004\021\231\001\002\000\030\004\ufffa\006\ufffa" +
    "\011\ufffa\014\ufffa\015\ufffa\023\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\034\ufffa\041\ufffa\001\002\000\014\004\170\006\171" +
    "\011\167\015\ufff5\034\172\001\002\000\004\015\234\001" +
    "\002\000\006\002\ufffe\033\ufffe\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\151\006\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\030" +
    "\001\001\000\006\015\146\016\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\076\001\001\000\004\017\044" +
    "\001\001\000\002\001\001\000\004\017\075\001\001\000" +
    "\004\017\074\001\001\000\004\017\073\001\001\000\004" +
    "\017\072\001\001\000\004\017\071\001\001\000\004\017" +
    "\067\001\001\000\004\017\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\060\020" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\114\001\001\000\002\001\001\000\004\015\116\001" +
    "\001\000\002\001\001\000\004\015\120\001\001\000\002" +
    "\001\001\000\004\017\122\001\001\000\002\001\001\000" +
    "\004\015\124\001\001\000\002\001\001\000\004\017\134" +
    "\001\001\000\004\017\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\146\016\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\151\006\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\161\001\001\000\012" +
    "\007\165\011\164\012\163\014\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\164\012\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\175\014\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\202\014\177\001\001\000\002\001" +
    "\001\000\004\010\204\001\001\000\012\007\165\014\162" +
    "\015\146\016\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\215\001\001\000\012\007\165\014\162\015\146\016\216" +
    "\001\001\000\002\001\001\000\004\017\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\165" +
    "\011\164\012\232\014\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

  private String errorMessage = "Unknown Error";

  @Override
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorMessage = "Syntax error at line " + (token.left + 1) + 
   	    ", column " + (token.right + 1) + "."; 
  } 

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
    report_fatal_error(errorMessage, cur_token);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws ParseException {
    throw new ParseException(message); 
  } 
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpList ::= ExpList COMMA Exp 
            {
              List<Exp> RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<Exp> expList =
		new LinkedList<Exp>(es);
		expList.add(e);
		RESULT = expList;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpList ::= Exp 
            {
              List<Exp> RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<Exp> expList = new LinkedList<Exp>();
		expList.add(e);
		RESULT = expList;		
		
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= LPAREN Exp RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= INV Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpNeg(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= NEW IDENTIFIER LPAREN RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ExpNew(i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= NEW INTTYPE LBRACKET Exp RBRACKET 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpNewIntArray(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= THIS 
            {
              Exp RESULT = null;
		 RESULT = new ExpThis(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= IDENTIFIER 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpId(i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= FALSE 
            {
              Exp RESULT = null;
		 RESULT = new ExpFalse(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= TRUE 
            {
              Exp RESULT = null;
		 RESULT = new ExpTrue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= INT 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpIntConst(i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp DOT IDENTIFIER LPAREN RPAREN 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ExpInvoke(e1, i1, new LinkedList<Exp>()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp DOT IDENTIFIER LPAREN ExpList RPAREN 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Exp> el = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpInvoke(e1, i1, el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp DOT LENGTH 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ExpArrayLength(e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp LBRACKET Exp RBRACKET 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new ExpArrayGet(e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp DIVIDE Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.DIV, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp TIMES Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.TIMES, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp MINUS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.MINUS, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp PLUS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.PLUS, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp LESS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.LT, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp AND Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpBinOp(e1, ExpBinOp.Op.AND, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StmList ::= Stm StmList 
            {
              List<Stm> RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List<Stm> s2 = (List<Stm>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<Stm> stmList =
	new LinkedList<Stm>(s2);
	stmList.addFirst(s1);
	RESULT = stmList;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*StmList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StmList ::= 
            {
              List<Stm> RESULT = null;
		 RESULT = new LinkedList<Stm>(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*StmList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stm ::= IDENTIFIER LBRACKET Exp RBRACKET ASSIGNMENT Exp SEMICOLON 
            {
              Stm RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmArrayAssign(i, e1, e2);
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stm ::= IDENTIFIER ASSIGNMENT Exp SEMICOLON 
            {
              Stm RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmAssign(i, e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stm ::= PRINT LPAREN LPAREN CHAR RPAREN Exp RPAREN SEMICOLON 
            {
              Stm RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new StmPrintChar(e1);
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stm ::= PRINTLN LPAREN Exp RPAREN SEMICOLON 
            {
              Stm RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new StmPrintlnInt(e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stm ::= WHILE LPAREN Exp RPAREN Stm 
            {
              Stm RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StmWhile(e1, s1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm ::= IF LPAREN Exp RPAREN Stm ELSE Stm 
            {
              Stm RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StmIf(e1, s1, s2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= LCURL StmList RCURL 
            {
              Stm RESULT = null;
		int sl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stm> sl1 = (List<Stm>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmList(sl1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Stm*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= IDENTIFIER 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TyClass(i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INTTYPE 
            {
              Ty RESULT = null;
		 RESULT = new TyInt(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Ty RESULT = null;
		 RESULT = new TyBool(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INTTYPE LBRACKET RBRACKET 
            {
              Ty RESULT = null;
		 RESULT = new TyArr(new TyInt()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArgList ::= Type IDENTIFIER COMMA ArgList 
            {
              List<Parameter> RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List<Parameter> al = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<Parameter> parameterList =
			new LinkedList<Parameter>(al);
			parameterList.add(0,new Parameter(i,t));
			RESULT = parameterList;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*ArgList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ArgList ::= Type IDENTIFIER 
            {
              List<Parameter> RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<Parameter> parameterList = new LinkedList<Parameter>();
		parameterList.add(new Parameter(i,t));
		RESULT = parameterList; 
		
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*ArgList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodList ::= MethodDeclaration MethodList 
            {
              List<DeclMeth> RESULT = null;
		int md1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int md1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclMeth md1 = (DeclMeth)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ml1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int ml1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List<DeclMeth> ml1 = (List<DeclMeth>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<DeclMeth> methList =
			new LinkedList<DeclMeth>(ml1);
			methList.addFirst(md1);
			RESULT = methList;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*MethodList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodList ::= 
            {
              List<DeclMeth> RESULT = null;
		 RESULT = new LinkedList<DeclMeth>(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*MethodList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= PUBLIC Type IDENTIFIER LPAREN RPAREN LCURL VarList StmList RETURN Exp SEMICOLON RCURL 
            {
              DeclMeth RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<DeclVar> vl = (List<DeclVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Stm> sl = (List<Stm>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclMeth(t,i,new LinkedList<Parameter>(),vl,new StmList(sl),e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclaration ::= PUBLIC Type IDENTIFIER LPAREN ArgList RPAREN LCURL VarList StmList RETURN Exp SEMICOLON RCURL 
            {
              DeclMeth RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<Parameter> al = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<DeclVar> vl = (List<DeclVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Stm> sl = (List<Stm>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclMeth(t,i,al,vl,new StmList(sl),e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarList ::= VarList VarDeclaration 
            {
              List<DeclVar> RESULT = null;
		int vl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclVar> vl1 = (List<DeclVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vd1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vd1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DeclVar vd1 = (DeclVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<DeclVar> varDeclarations =
			new LinkedList<DeclVar>(vl1);
			varDeclarations.add(vd1);
			RESULT = varDeclarations;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*VarList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= 
            {
              List<DeclVar> RESULT = null;
		 RESULT = new LinkedList<DeclVar>(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*VarList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDeclaration ::= Type IDENTIFIER SEMICOLON 
            {
              DeclVar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclVar(t,i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*VarDeclaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassList ::= ClassDeclaration ClassList 
            {
              List<DeclClass> RESULT = null;
		int cd1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cd1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclClass cd1 = (DeclClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List<DeclClass> cl1 = (List<DeclClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 LinkedList<DeclClass> classDeclarations =
			new LinkedList<DeclClass>(cl1);
			classDeclarations.add(cd1);
			RESULT = classDeclarations;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*ClassList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassList ::= 
            {
              List<DeclClass> RESULT = null;
		 RESULT = new LinkedList<DeclClass>(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*ClassList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER LCURL VarList MethodList RCURL 
            {
              DeclClass RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclVar> vl = (List<DeclVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclMeth> ml = (List<DeclMeth>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclClass(i1,i2,vl,ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*ClassDeclaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS IDENTIFIER LCURL VarList MethodList RCURL 
            {
              DeclClass RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclVar> vl = (List<DeclVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclMeth> ml = (List<DeclMeth>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclClass(i1,null,vl,ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*ClassDeclaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS IDENTIFIER LCURL PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENTIFIER RPAREN LCURL Stm RCURL RCURL 
            {
              DeclMain RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclMain(i1,i2,s1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*MainClass*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Goal ::= MainClass ClassList 
            {
              Prg RESULT = null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclMain mc = (DeclMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List<DeclClass> cl = (List<DeclClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Prg(mc, cl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Goal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Prg start_val = (Prg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

