package straightline;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;

parser code  {: 

  private String errorMessage = "Unknown Error";

  @Override
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorMessage = "Syntax error at line " + (token.left + 1) + 
   	    ", column " + (token.right + 1) + "."; 
  } 

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
    report_fatal_error(errorMessage, cur_token);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws ParseException {
    throw new ParseException(message); 
  } 
  
:};


/* Terminalsymbole, die vom Lexer produziert werden. */
terminal String IDENTIFIER;
terminal Integer INT;

terminal BOOL;
terminal CHAR;
terminal STRING;
terminal INTTYPE;

/* Klammern und Kontrollzeichen */
terminal LBRACKET;
terminal RBRACKET;
terminal LCURL;
terminal RCURL;
terminal LPAREN;
terminal RPAREN;
terminal COMMA;
terminal SEMICOLON;
terminal DOT;
/* Statements */
terminal IF;
terminal WHILE;
terminal PRINTLN;
terminal PRINT;
terminal LENGTH;
terminal THIS;
terminal NEW;
terminal CLASS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal MAIN;
terminal EXTENDS;


/* Operatoren */
terminal AND;
terminal LESS;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal EQ;
terminal TRUE;
terminal FALSE;
terminal INV;


// EOF is created automatically

/* Nichtterminalsymbole */
non terminal Stm;
non terminal Exp;
non terminal ExpList;

/* Praezedenzregeln */
precedence right SEMICOLON;
precedence left EQ;
precedence left PRINT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/* Startsymbol */
start with Stm;

/* Grammatik */
Stm ::= IDENTIFIER:i EQ Exp:e
          {: :}
      | PRINT LPAREN ExpList:es RPAREN   
          {: :}
      | Stm:s1 SEMICOLON Stm:s2 
          {: :}
      ;

Exp ::= Exp:e1 PLUS Exp:e2  
          {: :}
      | Exp:e1 MINUS Exp:e2  
          {: :}
      | Exp:e1 TIMES Exp:e2  
          {: :}
      | Exp:e1 DIVIDE Exp:e2  
          {: :}
       | IDENTIFIER:i
          {: :}
       | INT:num                 
          {: :}
       | LPAREN Exp:e RPAREN    
          {: :}
       | LPAREN Stm:s COMMA Exp:e RPAREN 
          {: :}
       ;
   
ExpList ::= Exp:e                    
              {: :}
           | ExpList:es COMMA Exp:e  
              {: :} 
           ;
