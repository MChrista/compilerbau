-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parse.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prg                                (0)
	Prg -> MethodList                                  (1)
	MethodList ->                                      (2)
	MethodList -> Method MethodList                    (3)
	Method -> identifier '(' integer ')' '{' Stms return identifier '}'   (4)
	Stms ->                                            (5)
	Stms -> Stm Stms                                   (6)
	Stm -> MOVE '(' Exp ',' Exp ')'                    (7)
	Stm -> JUMP '(' Exp ',' LabelList ')'              (8)
	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' identifier ',' identifier ')'   (9)
	Stm -> SEQ '(' Seq ')'                             (10)
	Stm -> LABEL '(' identifier ')'                    (11)
	Stm -> '(' Stm ')'                                 (12)
	Exp -> NAME '(' Label ')'                          (13)
	Exp -> TEMP '(' Temp ')'                           (14)
	Exp -> PARAM '(' integer ')'                       (15)
	Exp -> CONST '(' Integer ')'                       (16)
	Exp -> BINOP '(' Op ',' Exp ',' Exp ')'            (17)
	Exp -> MEM '(' Exp ')'                             (18)
	Exp -> CALL '(' Exp ')'                            (19)
	Exp -> CALL '(' Exp ',' Exps ')'                   (20)
	Exp -> ESEQ '(' ESeq ')'                           (21)
	Exp -> '(' Exp ')'                                 (22)
	Integer -> integer                                 (23)
	Integer -> '-' integer                             (24)
	Integer -> '(' Integer ')'                         (25)
	Temp -> identifier                                 (26)
	Temp -> '(' Temp ')'                               (27)
	Label -> identifier                                (28)
	Label -> '"' identifier '"'                        (29)
	Label -> '(' Label ')'                             (30)
	ESeq -> Exp                                        (31)
	ESeq -> Stm ESeq1                                  (32)
	ESeq1 -> ',' Exp                                   (33)
	ESeq1 -> ',' Stm ESeq1                             (34)
	Seq ->                                             (35)
	Seq -> Stm Seq1                                    (36)
	Seq1 ->                                            (37)
	Seq1 -> ',' Stm Seq1                               (38)
	Exps -> Exp                                        (39)
	Exps -> Exp ',' Exps                               (40)
	LabelList ->                                       (41)
	LabelList -> identifier LabelList0                 (42)
	LabelList -> '(' LabelList ')'                     (43)
	LabelList0 ->                                      (44)
	LabelList0 -> ',' identifier LabelList0            (45)
	Op -> MUL                                          (46)
	Op -> PLUS                                         (47)
	Op -> MINUS                                        (48)
	Op -> DIV                                          (49)
	Op -> AND                                          (50)
	Op -> OR                                           (51)
	Op -> XOR                                          (52)
	Op -> LSHIFT                                       (53)
	Op -> RSHIFT                                       (54)
	Op -> ARSHIFT                                      (55)
	Op -> '(' Op ')'                                   (56)
	Rel -> EQ                                          (57)
	Rel -> NE                                          (58)
	Rel -> LT                                          (59)
	Rel -> GT                                          (60)
	Rel -> LE                                          (61)
	Rel -> GE                                          (62)
	Rel -> ULT                                         (63)
	Rel -> UGT                                         (64)
	Rel -> ULE                                         (65)
	Rel -> UGE                                         (66)
	Rel -> '(' Rel ')'                                 (67)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'"'            { Tokens.Token Tokens.Quote _ }
	'('            { Tokens.Token Tokens.LPar _ }
	')'            { Tokens.Token Tokens.RPar _ }
	'{'            { Tokens.Token Tokens.LBrace _ }
	'}'            { Tokens.Token Tokens.RBrace _ }
	','            { Tokens.Token Tokens.Comma _ }
	'-'            { Tokens.Token Tokens.Minus _ }
	MOVE           { Tokens.Token Tokens.KwMOVE _ }
	NAME           { Tokens.Token Tokens.KwNAME _ }
	LABEL          { Tokens.Token Tokens.KwLABEL _ }
	CONST          { Tokens.Token Tokens.KwCONST _ }
	ESEQ           { Tokens.Token Tokens.KwESEQ _ }
	TEMP           { Tokens.Token Tokens.KwTEMP _ }
	PARAM          { Tokens.Token Tokens.KwPARAM _ }
	MEM            { Tokens.Token Tokens.KwMEM _ }
	BINOP          { Tokens.Token Tokens.KwBINOP _ }
	SEQ            { Tokens.Token Tokens.KwSEQ _ }
	CALL           { Tokens.Token Tokens.KwCALL _ }
	JUMP           { Tokens.Token Tokens.KwJUMP _ }
	CJUMP          { Tokens.Token Tokens.KwCJUMP _ }
	MUL            { Tokens.Token Tokens.KwMUL _ }
	PLUS           { Tokens.Token Tokens.KwPLUS _ }
	MINUS          { Tokens.Token Tokens.KwMINUS _ }
	DIV            { Tokens.Token Tokens.KwDIV _ }
	AND            { Tokens.Token Tokens.KwAND _ }
	OR             { Tokens.Token Tokens.KwOR _ }
	XOR            { Tokens.Token Tokens.KwXOR _ }
	LSHIFT         { Tokens.Token Tokens.KwLSHIFT _ }
	RSHIFT         { Tokens.Token Tokens.KwRSHIFT _ }
	ARSHIFT        { Tokens.Token Tokens.KwARSHIFT _ }
	EQ             { Tokens.Token Tokens.KwEQ _ }
	NE             { Tokens.Token Tokens.KwNE _ }
	LT             { Tokens.Token Tokens.KwLT _ }
	GT             { Tokens.Token Tokens.KwGT _ }
	LE             { Tokens.Token Tokens.KwLE _ }
	GE             { Tokens.Token Tokens.KwGE _ }
	ULT            { Tokens.Token Tokens.KwULT _ }
	UGT            { Tokens.Token Tokens.KwUGT _ }
	ULE            { Tokens.Token Tokens.KwULE _ }
	UGE            { Tokens.Token Tokens.KwUGE _ }
	return         { Tokens.Token Tokens.KwReturn _ }
	integer        { Tokens.Token (Tokens.Const $$) _ }
	identifier     { Tokens.Token (Tokens.Id $$) _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prg             rule  1
	MethodList      rules 2, 3
	Method          rule  4
	Stms            rules 5, 6
	Stm             rules 7, 8, 9, 10, 11, 12
	Exp             rules 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	Integer         rules 23, 24, 25
	Temp            rules 26, 27
	Label           rules 28, 29, 30
	ESeq            rules 31, 32
	ESeq1           rules 33, 34
	Seq             rules 35, 36
	Seq1            rules 37, 38
	Exps            rules 39, 40
	LabelList       rules 41, 42, 43
	LabelList0      rules 44, 45
	Op              rules 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
	Rel             rules 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	identifier     shift, and enter state 4
	%eof           reduce using rule 2

	Prg            goto state 5
	MethodList     goto state 2
	Method         goto state 3

State 1


	identifier     shift, and enter state 4

	MethodList     goto state 2
	Method         goto state 3

State 2

	Prg -> MethodList .                                 (rule 1)

	%eof           reduce using rule 1


State 3

	MethodList -> Method . MethodList                   (rule 3)

	identifier     shift, and enter state 4
	%eof           reduce using rule 2

	MethodList     goto state 7
	Method         goto state 3

State 4

	Method -> identifier . '(' integer ')' '{' Stms return identifier '}'    (rule 4)

	'('            shift, and enter state 6


State 5

	%start_parse -> Prg .                               (rule 0)

	%eof           accept


State 6

	Method -> identifier '(' . integer ')' '{' Stms return identifier '}'    (rule 4)

	integer        shift, and enter state 8


State 7

	MethodList -> Method MethodList .                   (rule 3)

	%eof           reduce using rule 3


State 8

	Method -> identifier '(' integer . ')' '{' Stms return identifier '}'    (rule 4)

	')'            shift, and enter state 9


State 9

	Method -> identifier '(' integer ')' . '{' Stms return identifier '}'    (rule 4)

	'{'            shift, and enter state 10


State 10

	Method -> identifier '(' integer ')' '{' . Stms return identifier '}'    (rule 4)

	'('            shift, and enter state 13
	MOVE           shift, and enter state 14
	LABEL          shift, and enter state 15
	SEQ            shift, and enter state 16
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18
	return         reduce using rule 5

	Stms           goto state 11
	Stm            goto state 12

State 11

	Method -> identifier '(' integer ')' '{' Stms . return identifier '}'    (rule 4)

	return         shift, and enter state 26


State 12

	Stms -> Stm . Stms                                  (rule 6)

	'('            shift, and enter state 13
	MOVE           shift, and enter state 14
	LABEL          shift, and enter state 15
	SEQ            shift, and enter state 16
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18
	return         reduce using rule 5

	Stms           goto state 25
	Stm            goto state 12

State 13

	Stm -> '(' . Stm ')'                                (rule 12)

	'('            shift, and enter state 13
	MOVE           shift, and enter state 14
	LABEL          shift, and enter state 15
	SEQ            shift, and enter state 16
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 24

State 14

	Stm -> MOVE . '(' Exp ',' Exp ')'                   (rule 7)

	'('            shift, and enter state 23


State 15

	Stm -> LABEL . '(' identifier ')'                   (rule 11)

	'('            shift, and enter state 22


State 16

	Stm -> SEQ . '(' Seq ')'                            (rule 10)

	'('            shift, and enter state 21


State 17

	Stm -> JUMP . '(' Exp ',' LabelList ')'             (rule 8)

	'('            shift, and enter state 20


State 18

	Stm -> CJUMP . '(' Rel ',' Exp ',' Exp ',' identifier ',' identifier ')'    (rule 9)

	'('            shift, and enter state 19


State 19

	Stm -> CJUMP '(' . Rel ',' Exp ',' Exp ',' identifier ',' identifier ')'    (rule 9)

	'('            shift, and enter state 44
	EQ             shift, and enter state 45
	NE             shift, and enter state 46
	LT             shift, and enter state 47
	GT             shift, and enter state 48
	LE             shift, and enter state 49
	GE             shift, and enter state 50
	ULT            shift, and enter state 51
	UGT            shift, and enter state 52
	ULE            shift, and enter state 53
	UGE            shift, and enter state 54

	Rel            goto state 43

State 20

	Stm -> JUMP '(' . Exp ',' LabelList ')'             (rule 8)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 42

State 21

	Stm -> SEQ '(' . Seq ')'                            (rule 10)

	'('            shift, and enter state 13
	')'            reduce using rule 35
	MOVE           shift, and enter state 14
	LABEL          shift, and enter state 15
	SEQ            shift, and enter state 16
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 40
	Seq            goto state 41

State 22

	Stm -> LABEL '(' . identifier ')'                   (rule 11)

	identifier     shift, and enter state 39


State 23

	Stm -> MOVE '(' . Exp ',' Exp ')'                   (rule 7)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 29

State 24

	Stm -> '(' Stm . ')'                                (rule 12)

	')'            shift, and enter state 28


State 25

	Stms -> Stm Stms .                                  (rule 6)

	return         reduce using rule 6


State 26

	Method -> identifier '(' integer ')' '{' Stms return . identifier '}'    (rule 4)

	identifier     shift, and enter state 27


State 27

	Method -> identifier '(' integer ')' '{' Stms return identifier . '}'    (rule 4)

	'}'            shift, and enter state 72


State 28

	Stm -> '(' Stm ')' .                                (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	MOVE           reduce using rule 12
	LABEL          reduce using rule 12
	SEQ            reduce using rule 12
	JUMP           reduce using rule 12
	CJUMP          reduce using rule 12
	return         reduce using rule 12


State 29

	Stm -> MOVE '(' Exp . ',' Exp ')'                   (rule 7)

	','            shift, and enter state 71


State 30

	Exp -> '(' . Exp ')'                                (rule 22)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 70

State 31

	Exp -> NAME . '(' Label ')'                         (rule 13)

	'('            shift, and enter state 69


State 32

	Exp -> CONST . '(' Integer ')'                      (rule 16)

	'('            shift, and enter state 68


State 33

	Exp -> ESEQ . '(' ESeq ')'                          (rule 21)

	'('            shift, and enter state 67


State 34

	Exp -> TEMP . '(' Temp ')'                          (rule 14)

	'('            shift, and enter state 66


State 35

	Exp -> PARAM . '(' integer ')'                      (rule 15)

	'('            shift, and enter state 65


State 36

	Exp -> MEM . '(' Exp ')'                            (rule 18)

	'('            shift, and enter state 64


State 37

	Exp -> BINOP . '(' Op ',' Exp ',' Exp ')'           (rule 17)

	'('            shift, and enter state 63


State 38

	Exp -> CALL . '(' Exp ')'                           (rule 19)
	Exp -> CALL . '(' Exp ',' Exps ')'                  (rule 20)

	'('            shift, and enter state 62


State 39

	Stm -> LABEL '(' identifier . ')'                   (rule 11)

	')'            shift, and enter state 61


State 40

	Seq -> Stm . Seq1                                   (rule 36)

	')'            reduce using rule 37
	','            shift, and enter state 60

	Seq1           goto state 59

State 41

	Stm -> SEQ '(' Seq . ')'                            (rule 10)

	')'            shift, and enter state 58


State 42

	Stm -> JUMP '(' Exp . ',' LabelList ')'             (rule 8)

	','            shift, and enter state 57


State 43

	Stm -> CJUMP '(' Rel . ',' Exp ',' Exp ',' identifier ',' identifier ')'    (rule 9)

	','            shift, and enter state 56


State 44

	Rel -> '(' . Rel ')'                                (rule 67)

	'('            shift, and enter state 44
	EQ             shift, and enter state 45
	NE             shift, and enter state 46
	LT             shift, and enter state 47
	GT             shift, and enter state 48
	LE             shift, and enter state 49
	GE             shift, and enter state 50
	ULT            shift, and enter state 51
	UGT            shift, and enter state 52
	ULE            shift, and enter state 53
	UGE            shift, and enter state 54

	Rel            goto state 55

State 45

	Rel -> EQ .                                         (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57


State 46

	Rel -> NE .                                         (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58


State 47

	Rel -> LT .                                         (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59


State 48

	Rel -> GT .                                         (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60


State 49

	Rel -> LE .                                         (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61


State 50

	Rel -> GE .                                         (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62


State 51

	Rel -> ULT .                                        (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63


State 52

	Rel -> UGT .                                        (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64


State 53

	Rel -> ULE .                                        (rule 65)

	')'            reduce using rule 65
	','            reduce using rule 65


State 54

	Rel -> UGE .                                        (rule 66)

	')'            reduce using rule 66
	','            reduce using rule 66


State 55

	Rel -> '(' Rel . ')'                                (rule 67)

	')'            shift, and enter state 110


State 56

	Stm -> CJUMP '(' Rel ',' . Exp ',' Exp ',' identifier ',' identifier ')'    (rule 9)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 109

State 57

	Stm -> JUMP '(' Exp ',' . LabelList ')'             (rule 8)

	'('            shift, and enter state 107
	')'            reduce using rule 41
	identifier     shift, and enter state 108

	LabelList      goto state 106

State 58

	Stm -> SEQ '(' Seq ')' .                            (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10
	MOVE           reduce using rule 10
	LABEL          reduce using rule 10
	SEQ            reduce using rule 10
	JUMP           reduce using rule 10
	CJUMP          reduce using rule 10
	return         reduce using rule 10


State 59

	Seq -> Stm Seq1 .                                   (rule 36)

	')'            reduce using rule 36


State 60

	Seq1 -> ',' . Stm Seq1                              (rule 38)

	'('            shift, and enter state 13
	MOVE           shift, and enter state 14
	LABEL          shift, and enter state 15
	SEQ            shift, and enter state 16
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 105

State 61

	Stm -> LABEL '(' identifier ')' .                   (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	','            reduce using rule 11
	MOVE           reduce using rule 11
	LABEL          reduce using rule 11
	SEQ            reduce using rule 11
	JUMP           reduce using rule 11
	CJUMP          reduce using rule 11
	return         reduce using rule 11


State 62

	Exp -> CALL '(' . Exp ')'                           (rule 19)
	Exp -> CALL '(' . Exp ',' Exps ')'                  (rule 20)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 104

State 63

	Exp -> BINOP '(' . Op ',' Exp ',' Exp ')'           (rule 17)

	'('            shift, and enter state 93
	MUL            shift, and enter state 94
	PLUS           shift, and enter state 95
	MINUS          shift, and enter state 96
	DIV            shift, and enter state 97
	AND            shift, and enter state 98
	OR             shift, and enter state 99
	XOR            shift, and enter state 100
	LSHIFT         shift, and enter state 101
	RSHIFT         shift, and enter state 102
	ARSHIFT        shift, and enter state 103

	Op             goto state 92

State 64

	Exp -> MEM '(' . Exp ')'                            (rule 18)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 91

State 65

	Exp -> PARAM '(' . integer ')'                      (rule 15)

	integer        shift, and enter state 90


State 66

	Exp -> TEMP '(' . Temp ')'                          (rule 14)

	'('            shift, and enter state 88
	identifier     shift, and enter state 89

	Temp           goto state 87

State 67

	Exp -> ESEQ '(' . ESeq ')'                          (rule 21)

	'('            shift, and enter state 86
	MOVE           shift, and enter state 14
	NAME           shift, and enter state 31
	LABEL          shift, and enter state 15
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	SEQ            shift, and enter state 16
	CALL           shift, and enter state 38
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 83
	Exp            goto state 84
	ESeq           goto state 85

State 68

	Exp -> CONST '(' . Integer ')'                      (rule 16)

	'('            shift, and enter state 80
	'-'            shift, and enter state 81
	integer        shift, and enter state 82

	Integer        goto state 79

State 69

	Exp -> NAME '(' . Label ')'                         (rule 13)

	'"'            shift, and enter state 76
	'('            shift, and enter state 77
	identifier     shift, and enter state 78

	Label          goto state 75

State 70

	Exp -> '(' Exp . ')'                                (rule 22)

	')'            shift, and enter state 74


State 71

	Stm -> MOVE '(' Exp ',' . Exp ')'                   (rule 7)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 73

State 72

	Method -> identifier '(' integer ')' '{' Stms return identifier '}' .    (rule 4)

	identifier     reduce using rule 4
	%eof           reduce using rule 4


State 73

	Stm -> MOVE '(' Exp ',' Exp . ')'                   (rule 7)

	')'            shift, and enter state 134


State 74

	Exp -> '(' Exp ')' .                                (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22


State 75

	Exp -> NAME '(' Label . ')'                         (rule 13)

	')'            shift, and enter state 133


State 76

	Label -> '"' . identifier '"'                       (rule 29)

	identifier     shift, and enter state 132


State 77

	Label -> '(' . Label ')'                            (rule 30)

	'"'            shift, and enter state 76
	'('            shift, and enter state 77
	identifier     shift, and enter state 78

	Label          goto state 131

State 78

	Label -> identifier .                               (rule 28)

	')'            reduce using rule 28


State 79

	Exp -> CONST '(' Integer . ')'                      (rule 16)

	')'            shift, and enter state 130


State 80

	Integer -> '(' . Integer ')'                        (rule 25)

	'('            shift, and enter state 80
	'-'            shift, and enter state 81
	integer        shift, and enter state 82

	Integer        goto state 129

State 81

	Integer -> '-' . integer                            (rule 24)

	integer        shift, and enter state 128


State 82

	Integer -> integer .                                (rule 23)

	')'            reduce using rule 23


State 83

	ESeq -> Stm . ESeq1                                 (rule 32)

	','            shift, and enter state 127

	ESeq1          goto state 126

State 84

	ESeq -> Exp .                                       (rule 31)

	')'            reduce using rule 31


State 85

	Exp -> ESEQ '(' ESeq . ')'                          (rule 21)

	')'            shift, and enter state 125


State 86

	Stm -> '(' . Stm ')'                                (rule 12)
	Exp -> '(' . Exp ')'                                (rule 22)

	'('            shift, and enter state 86
	MOVE           shift, and enter state 14
	NAME           shift, and enter state 31
	LABEL          shift, and enter state 15
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	SEQ            shift, and enter state 16
	CALL           shift, and enter state 38
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 24
	Exp            goto state 70

State 87

	Exp -> TEMP '(' Temp . ')'                          (rule 14)

	')'            shift, and enter state 124


State 88

	Temp -> '(' . Temp ')'                              (rule 27)

	'('            shift, and enter state 88
	identifier     shift, and enter state 89

	Temp           goto state 123

State 89

	Temp -> identifier .                                (rule 26)

	')'            reduce using rule 26


State 90

	Exp -> PARAM '(' integer . ')'                      (rule 15)

	')'            shift, and enter state 122


State 91

	Exp -> MEM '(' Exp . ')'                            (rule 18)

	')'            shift, and enter state 121


State 92

	Exp -> BINOP '(' Op . ',' Exp ',' Exp ')'           (rule 17)

	','            shift, and enter state 120


State 93

	Op -> '(' . Op ')'                                  (rule 56)

	'('            shift, and enter state 93
	MUL            shift, and enter state 94
	PLUS           shift, and enter state 95
	MINUS          shift, and enter state 96
	DIV            shift, and enter state 97
	AND            shift, and enter state 98
	OR             shift, and enter state 99
	XOR            shift, and enter state 100
	LSHIFT         shift, and enter state 101
	RSHIFT         shift, and enter state 102
	ARSHIFT        shift, and enter state 103

	Op             goto state 119

State 94

	Op -> MUL .                                         (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46


State 95

	Op -> PLUS .                                        (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47


State 96

	Op -> MINUS .                                       (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48


State 97

	Op -> DIV .                                         (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49


State 98

	Op -> AND .                                         (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50


State 99

	Op -> OR .                                          (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51


State 100

	Op -> XOR .                                         (rule 52)

	')'            reduce using rule 52
	','            reduce using rule 52


State 101

	Op -> LSHIFT .                                      (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53


State 102

	Op -> RSHIFT .                                      (rule 54)

	')'            reduce using rule 54
	','            reduce using rule 54


State 103

	Op -> ARSHIFT .                                     (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55


State 104

	Exp -> CALL '(' Exp . ')'                           (rule 19)
	Exp -> CALL '(' Exp . ',' Exps ')'                  (rule 20)

	')'            shift, and enter state 117
	','            shift, and enter state 118


State 105

	Seq1 -> ',' Stm . Seq1                              (rule 38)

	')'            reduce using rule 37
	','            shift, and enter state 60

	Seq1           goto state 116

State 106

	Stm -> JUMP '(' Exp ',' LabelList . ')'             (rule 8)

	')'            shift, and enter state 115


State 107

	LabelList -> '(' . LabelList ')'                    (rule 43)

	'('            shift, and enter state 107
	')'            reduce using rule 41
	identifier     shift, and enter state 108

	LabelList      goto state 114

State 108

	LabelList -> identifier . LabelList0                (rule 42)

	')'            reduce using rule 44
	','            shift, and enter state 113

	LabelList0     goto state 112

State 109

	Stm -> CJUMP '(' Rel ',' Exp . ',' Exp ',' identifier ',' identifier ')'    (rule 9)

	','            shift, and enter state 111


State 110

	Rel -> '(' Rel ')' .                                (rule 67)

	')'            reduce using rule 67
	','            reduce using rule 67


State 111

	Stm -> CJUMP '(' Rel ',' Exp ',' . Exp ',' identifier ',' identifier ')'    (rule 9)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 147

State 112

	LabelList -> identifier LabelList0 .                (rule 42)

	')'            reduce using rule 42


State 113

	LabelList0 -> ',' . identifier LabelList0           (rule 45)

	identifier     shift, and enter state 146


State 114

	LabelList -> '(' LabelList . ')'                    (rule 43)

	')'            shift, and enter state 145


State 115

	Stm -> JUMP '(' Exp ',' LabelList ')' .             (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	','            reduce using rule 8
	MOVE           reduce using rule 8
	LABEL          reduce using rule 8
	SEQ            reduce using rule 8
	JUMP           reduce using rule 8
	CJUMP          reduce using rule 8
	return         reduce using rule 8


State 116

	Seq1 -> ',' Stm Seq1 .                              (rule 38)

	')'            reduce using rule 38


State 117

	Exp -> CALL '(' Exp ')' .                           (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19


State 118

	Exp -> CALL '(' Exp ',' . Exps ')'                  (rule 20)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 143
	Exps           goto state 144

State 119

	Op -> '(' Op . ')'                                  (rule 56)

	')'            shift, and enter state 142


State 120

	Exp -> BINOP '(' Op ',' . Exp ',' Exp ')'           (rule 17)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 141

State 121

	Exp -> MEM '(' Exp ')' .                            (rule 18)

	')'            reduce using rule 18
	','            reduce using rule 18


State 122

	Exp -> PARAM '(' integer ')' .                      (rule 15)

	')'            reduce using rule 15
	','            reduce using rule 15


State 123

	Temp -> '(' Temp . ')'                              (rule 27)

	')'            shift, and enter state 140


State 124

	Exp -> TEMP '(' Temp ')' .                          (rule 14)

	')'            reduce using rule 14
	','            reduce using rule 14


State 125

	Exp -> ESEQ '(' ESeq ')' .                          (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21


State 126

	ESeq -> Stm ESeq1 .                                 (rule 32)

	')'            reduce using rule 32


State 127

	ESeq1 -> ',' . Exp                                  (rule 33)
	ESeq1 -> ',' . Stm ESeq1                            (rule 34)

	'('            shift, and enter state 86
	MOVE           shift, and enter state 14
	NAME           shift, and enter state 31
	LABEL          shift, and enter state 15
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	SEQ            shift, and enter state 16
	CALL           shift, and enter state 38
	JUMP           shift, and enter state 17
	CJUMP          shift, and enter state 18

	Stm            goto state 138
	Exp            goto state 139

State 128

	Integer -> '-' integer .                            (rule 24)

	')'            reduce using rule 24


State 129

	Integer -> '(' Integer . ')'                        (rule 25)

	')'            shift, and enter state 137


State 130

	Exp -> CONST '(' Integer ')' .                      (rule 16)

	')'            reduce using rule 16
	','            reduce using rule 16


State 131

	Label -> '(' Label . ')'                            (rule 30)

	')'            shift, and enter state 136


State 132

	Label -> '"' identifier . '"'                       (rule 29)

	'"'            shift, and enter state 135


State 133

	Exp -> NAME '(' Label ')' .                         (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13


State 134

	Stm -> MOVE '(' Exp ',' Exp ')' .                   (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	','            reduce using rule 7
	MOVE           reduce using rule 7
	LABEL          reduce using rule 7
	SEQ            reduce using rule 7
	JUMP           reduce using rule 7
	CJUMP          reduce using rule 7
	return         reduce using rule 7


State 135

	Label -> '"' identifier '"' .                       (rule 29)

	')'            reduce using rule 29


State 136

	Label -> '(' Label ')' .                            (rule 30)

	')'            reduce using rule 30


State 137

	Integer -> '(' Integer ')' .                        (rule 25)

	')'            reduce using rule 25


State 138

	ESeq1 -> ',' Stm . ESeq1                            (rule 34)

	','            shift, and enter state 127

	ESeq1          goto state 153

State 139

	ESeq1 -> ',' Exp .                                  (rule 33)

	')'            reduce using rule 33


State 140

	Temp -> '(' Temp ')' .                              (rule 27)

	')'            reduce using rule 27


State 141

	Exp -> BINOP '(' Op ',' Exp . ',' Exp ')'           (rule 17)

	','            shift, and enter state 152


State 142

	Op -> '(' Op ')' .                                  (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56


State 143

	Exps -> Exp .                                       (rule 39)
	Exps -> Exp . ',' Exps                              (rule 40)

	')'            reduce using rule 39
	','            shift, and enter state 151


State 144

	Exp -> CALL '(' Exp ',' Exps . ')'                  (rule 20)

	')'            shift, and enter state 150


State 145

	LabelList -> '(' LabelList ')' .                    (rule 43)

	')'            reduce using rule 43


State 146

	LabelList0 -> ',' identifier . LabelList0           (rule 45)

	')'            reduce using rule 44
	','            shift, and enter state 113

	LabelList0     goto state 149

State 147

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp . ',' identifier ',' identifier ')'    (rule 9)

	','            shift, and enter state 148


State 148

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' . identifier ',' identifier ')'    (rule 9)

	identifier     shift, and enter state 156


State 149

	LabelList0 -> ',' identifier LabelList0 .           (rule 45)

	')'            reduce using rule 45


State 150

	Exp -> CALL '(' Exp ',' Exps ')' .                  (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20


State 151

	Exps -> Exp ',' . Exps                              (rule 40)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 143
	Exps           goto state 155

State 152

	Exp -> BINOP '(' Op ',' Exp ',' . Exp ')'           (rule 17)

	'('            shift, and enter state 30
	NAME           shift, and enter state 31
	CONST          shift, and enter state 32
	ESEQ           shift, and enter state 33
	TEMP           shift, and enter state 34
	PARAM          shift, and enter state 35
	MEM            shift, and enter state 36
	BINOP          shift, and enter state 37
	CALL           shift, and enter state 38

	Exp            goto state 154

State 153

	ESeq1 -> ',' Stm ESeq1 .                            (rule 34)

	')'            reduce using rule 34


State 154

	Exp -> BINOP '(' Op ',' Exp ',' Exp . ')'           (rule 17)

	')'            shift, and enter state 158


State 155

	Exps -> Exp ',' Exps .                              (rule 40)

	')'            reduce using rule 40


State 156

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' identifier . ',' identifier ')'    (rule 9)

	','            shift, and enter state 157


State 157

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' identifier ',' . identifier ')'    (rule 9)

	identifier     shift, and enter state 159


State 158

	Exp -> BINOP '(' Op ',' Exp ',' Exp ')' .           (rule 17)

	')'            reduce using rule 17
	','            reduce using rule 17


State 159

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' identifier ',' identifier . ')'    (rule 9)

	')'            shift, and enter state 160


State 160

	Stm -> CJUMP '(' Rel ',' Exp ',' Exp ',' identifier ',' identifier ')' .    (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	','            reduce using rule 9
	MOVE           reduce using rule 9
	LABEL          reduce using rule 9
	SEQ            reduce using rule 9
	JUMP           reduce using rule 9
	CJUMP          reduce using rule 9
	return         reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 68
Number of terminals: 43
Number of non-terminals: 19
Number of states: 161
