-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from ParseIntel.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prg                                (0)
	Prg ->                                             (1)
	Prg -> Label IList                                 (2)
	Prg -> Label IList ret Prg                         (3)
	IList ->                                           (4)
	IList -> Instr IList                               (5)
	Instr -> Label                                     (6)
	Instr -> DS Dest ',' Src                           (7)
	Instr -> D Dest                                    (8)
	Instr -> lea Reg ',' dword ptr '[' Addr ']'        (9)
	Instr -> cmp Dest ',' Src                          (10)
	Instr -> push Src                                  (11)
	Instr -> imul Reg ',' Src                          (12)
	Instr -> imul Dest                                 (13)
	Instr -> idiv Dest                                 (14)
	Instr -> jmp label                                 (15)
	Instr -> CJmp label                                (16)
	Instr -> call label                                (17)
	Instr -> enter Nat ',' '0'                         (18)
	Instr -> cdq                                       (19)
	Instr -> leave                                     (20)
	Instr -> nop                                       (21)
	Label -> label ':'                                 (22)
	DS -> mov                                          (23)
	DS -> add                                          (24)
	DS -> sub                                          (25)
	DS -> shl                                          (26)
	DS -> shr                                          (27)
	DS -> sal                                          (28)
	DS -> sar                                          (29)
	DS -> and                                          (30)
	DS -> or                                           (31)
	DS -> xor                                          (32)
	D -> pop                                           (33)
	D -> neg                                           (34)
	D -> not                                           (35)
	D -> inc                                           (36)
	D -> dec                                           (37)
	CJmp -> je                                         (38)
	CJmp -> jne                                        (39)
	CJmp -> jl                                         (40)
	CJmp -> jle                                        (41)
	CJmp -> jg                                         (42)
	CJmp -> jge                                        (43)
	Src -> Int                                         (44)
	Src -> Dest                                        (45)
	Dest -> Reg                                        (46)
	Dest -> dword ptr '[' Addr ']'                     (47)
	Reg -> reg                                         (48)
	Reg -> temp                                        (49)
	Addr -> Reg                                        (50)
	Addr -> Reg '+' Int                                (51)
	Addr -> Reg '+' Reg                                (52)
	Addr -> Int '+' Reg                                (53)
	Addr -> Reg '+' Reg '+' Int                        (54)
	Addr -> Reg '+' Int '+' Reg                        (55)
	Addr -> Int '+' Reg '+' Reg                        (56)
	Addr -> Reg '*' Scl                                (57)
	Addr -> Scl '*' Reg                                (58)
	Addr -> Reg '*' Scl '+' Int                        (59)
	Addr -> Scl '*' Reg '+' Int                        (60)
	Addr -> Reg '*' Scl '+' Reg                        (61)
	Addr -> Scl '*' Reg '+' Reg                        (62)
	Addr -> Int '+' Reg '*' Scl                        (63)
	Addr -> Int '+' Scl '*' Reg                        (64)
	Addr -> Reg '+' Reg '*' Scl                        (65)
	Addr -> Reg '+' Scl '*' Reg                        (66)
	Addr -> Reg '*' Scl '+' Int '+' Reg                (67)
	Addr -> Scl '*' Reg '+' Int '+' Reg                (68)
	Addr -> Reg '*' Scl '+' Reg '+' Int                (69)
	Addr -> Scl '*' Reg '+' Reg '+' Int                (70)
	Addr -> Int '+' Reg '*' Scl '+' Reg                (71)
	Addr -> Int '+' Scl '*' Reg '+' Reg                (72)
	Addr -> Reg '+' Reg '*' Scl '+' Int                (73)
	Addr -> Reg '+' Scl '*' Reg '+' Int                (74)
	Addr -> Reg '+' Int '+' Reg '*' Scl                (75)
	Addr -> Reg '+' Int '+' Scl '*' Reg                (76)
	Addr -> Int '+' Reg '+' Reg '*' Scl                (77)
	Addr -> Int '+' Reg '+' Scl '*' Reg                (78)
	Addr -> Reg '-' Int                                (79)
	Addr -> Reg '+' Reg '-' Int                        (80)
	Addr -> Reg '-' Int '+' Reg                        (81)
	Addr -> Reg '*' Scl '-' Int                        (82)
	Addr -> Scl '*' Reg '-' Int                        (83)
	Addr -> Reg '*' Scl '-' Int '+' Reg                (84)
	Addr -> Scl '*' Reg '-' Int '+' Reg                (85)
	Addr -> Reg '*' Scl '+' Reg '-' Int                (86)
	Addr -> Scl '*' Reg '+' Reg '-' Int                (87)
	Addr -> Reg '+' Reg '*' Scl '-' Int                (88)
	Addr -> Reg '+' Scl '*' Reg '-' Int                (89)
	Addr -> Reg '-' Int '+' Reg '*' Scl                (90)
	Addr -> Reg '-' Int '+' Scl '*' Reg                (91)
	Scl -> '1'                                         (92)
	Scl -> '2'                                         (93)
	Scl -> '4'                                         (94)
	Scl -> '8'                                         (95)
	Nat -> '0'                                         (96)
	Nat -> '1'                                         (97)
	Nat -> '2'                                         (98)
	Nat -> '4'                                         (99)
	Nat -> '8'                                         (100)
	Nat -> nat                                         (101)
	Int -> Nat                                         (102)
	Int -> '-' Nat                                     (103)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'['            { LBrack _ }
	']'            { RBrack _ }
	':'            { Colon _ }
	','            { Comma _ }
	'+'            { Plus _ }
	'-'            { Minus _ }
	'*'            { Times _ }
	'0'            { Nat 0 _ }
	'1'            { Nat 1 _ }
	'2'            { Nat 2 _ }
	'4'            { Nat 4 _ }
	'8'            { Nat 8 _ }
	mov            { Mov _ }
	add            { Add _ }
	sub            { Sub _ }
	shl            { Shl _ }
	shr            { Shr _ }
	sal            { Sal _ }
	sar            { Sar _ }
	and            { And _ }
	or             { Or _ }
	xor            { Xor _ }
	neg            { Neg _ }
	not            { Not _ }
	inc            { Inc _ }
	dec            { Dec _ }
	pop            { Pop _ }
	push           { Push _ }
	imul           { Imul _ }
	idiv           { Idiv _ }
	jmp            { Jmp _ }
	lea            { Lea _ }
	cmp            { Cmp _ }
	cdq            { Cdq _ }
	je             { Je _ }
	jne            { Jne _ }
	jl             { Jl _ }
	jle            { Jle _ }
	jg             { Jg _ }
	jge            { Jge _ }
	call           { Call _ }
	ret            { Ret _ }
	enter          { Enter _ }
	leave          { Leave _ }
	nop            { Nop _ }
	dword          { Dword _ }
	ptr            { Ptr _ }
	nat            { Nat $$ _ }
	temp           { Tok.Temp $$ _ }
	reg            { Tok.Reg $$ _ }
	label          { Id $$ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prg             rules 1, 2, 3
	IList           rules 4, 5
	Instr           rules 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
	Label           rule  22
	DS              rules 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
	D               rules 33, 34, 35, 36, 37
	CJmp            rules 38, 39, 40, 41, 42, 43
	Src             rules 44, 45
	Dest            rules 46, 47
	Reg             rules 48, 49
	Addr            rules 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91
	Scl             rules 92, 93, 94, 95
	Nat             rules 96, 97, 98, 99, 100, 101
	Int             rules 102, 103

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	label          shift, and enter state 4
	%eof           reduce using rule 1

	Prg            goto state 2
	Label          goto state 3

State 1




State 2

	%start_parse -> Prg .                               (rule 0)

	%eof           accept


State 3

	Prg -> Label . IList                                (rule 2)
	Prg -> Label . IList ret Prg                        (rule 3)

	mov            shift, and enter state 12
	add            shift, and enter state 13
	sub            shift, and enter state 14
	shl            shift, and enter state 15
	shr            shift, and enter state 16
	sal            shift, and enter state 17
	sar            shift, and enter state 18
	and            shift, and enter state 19
	or             shift, and enter state 20
	xor            shift, and enter state 21
	neg            shift, and enter state 22
	not            shift, and enter state 23
	inc            shift, and enter state 24
	dec            shift, and enter state 25
	pop            shift, and enter state 26
	push           shift, and enter state 27
	imul           shift, and enter state 28
	idiv           shift, and enter state 29
	jmp            shift, and enter state 30
	lea            shift, and enter state 31
	cmp            shift, and enter state 32
	cdq            shift, and enter state 33
	je             shift, and enter state 34
	jne            shift, and enter state 35
	jl             shift, and enter state 36
	jle            shift, and enter state 37
	jg             shift, and enter state 38
	jge            shift, and enter state 39
	call           shift, and enter state 40
	ret            reduce using rule 4
	enter          shift, and enter state 41
	leave          shift, and enter state 42
	nop            shift, and enter state 43
	label          shift, and enter state 4
	%eof           reduce using rule 4

	IList          goto state 6
	Instr          goto state 7
	Label          goto state 8
	DS             goto state 9
	D              goto state 10
	CJmp           goto state 11

State 4

	Label -> label . ':'                                (rule 22)

	':'            shift, and enter state 5


State 5

	Label -> label ':' .                                (rule 22)

	mov            reduce using rule 22
	add            reduce using rule 22
	sub            reduce using rule 22
	shl            reduce using rule 22
	shr            reduce using rule 22
	sal            reduce using rule 22
	sar            reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	xor            reduce using rule 22
	neg            reduce using rule 22
	not            reduce using rule 22
	inc            reduce using rule 22
	dec            reduce using rule 22
	pop            reduce using rule 22
	push           reduce using rule 22
	imul           reduce using rule 22
	idiv           reduce using rule 22
	jmp            reduce using rule 22
	lea            reduce using rule 22
	cmp            reduce using rule 22
	cdq            reduce using rule 22
	je             reduce using rule 22
	jne            reduce using rule 22
	jl             reduce using rule 22
	jle            reduce using rule 22
	jg             reduce using rule 22
	jge            reduce using rule 22
	call           reduce using rule 22
	ret            reduce using rule 22
	enter          reduce using rule 22
	leave          reduce using rule 22
	nop            reduce using rule 22
	label          reduce using rule 22
	%eof           reduce using rule 22


State 6

	Prg -> Label IList .                                (rule 2)
	Prg -> Label IList . ret Prg                        (rule 3)

	ret            shift, and enter state 71
	%eof           reduce using rule 2


State 7

	IList -> Instr . IList                              (rule 5)

	mov            shift, and enter state 12
	add            shift, and enter state 13
	sub            shift, and enter state 14
	shl            shift, and enter state 15
	shr            shift, and enter state 16
	sal            shift, and enter state 17
	sar            shift, and enter state 18
	and            shift, and enter state 19
	or             shift, and enter state 20
	xor            shift, and enter state 21
	neg            shift, and enter state 22
	not            shift, and enter state 23
	inc            shift, and enter state 24
	dec            shift, and enter state 25
	pop            shift, and enter state 26
	push           shift, and enter state 27
	imul           shift, and enter state 28
	idiv           shift, and enter state 29
	jmp            shift, and enter state 30
	lea            shift, and enter state 31
	cmp            shift, and enter state 32
	cdq            shift, and enter state 33
	je             shift, and enter state 34
	jne            shift, and enter state 35
	jl             shift, and enter state 36
	jle            shift, and enter state 37
	jg             shift, and enter state 38
	jge            shift, and enter state 39
	call           shift, and enter state 40
	ret            reduce using rule 4
	enter          shift, and enter state 41
	leave          shift, and enter state 42
	nop            shift, and enter state 43
	label          shift, and enter state 4
	%eof           reduce using rule 4

	IList          goto state 70
	Instr          goto state 7
	Label          goto state 8
	DS             goto state 9
	D              goto state 10
	CJmp           goto state 11

State 8

	Instr -> Label .                                    (rule 6)

	mov            reduce using rule 6
	add            reduce using rule 6
	sub            reduce using rule 6
	shl            reduce using rule 6
	shr            reduce using rule 6
	sal            reduce using rule 6
	sar            reduce using rule 6
	and            reduce using rule 6
	or             reduce using rule 6
	xor            reduce using rule 6
	neg            reduce using rule 6
	not            reduce using rule 6
	inc            reduce using rule 6
	dec            reduce using rule 6
	pop            reduce using rule 6
	push           reduce using rule 6
	imul           reduce using rule 6
	idiv           reduce using rule 6
	jmp            reduce using rule 6
	lea            reduce using rule 6
	cmp            reduce using rule 6
	cdq            reduce using rule 6
	je             reduce using rule 6
	jne            reduce using rule 6
	jl             reduce using rule 6
	jle            reduce using rule 6
	jg             reduce using rule 6
	jge            reduce using rule 6
	call           reduce using rule 6
	ret            reduce using rule 6
	enter          reduce using rule 6
	leave          reduce using rule 6
	nop            reduce using rule 6
	label          reduce using rule 6
	%eof           reduce using rule 6


State 9

	Instr -> DS . Dest ',' Src                          (rule 7)

	dword          shift, and enter state 54
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Dest           goto state 69
	Reg            goto state 53

State 10

	Instr -> D . Dest                                   (rule 8)

	dword          shift, and enter state 54
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Dest           goto state 68
	Reg            goto state 53

State 11

	Instr -> CJmp . label                               (rule 16)

	label          shift, and enter state 67


State 12

	DS -> mov .                                         (rule 23)

	dword          reduce using rule 23
	temp           reduce using rule 23
	reg            reduce using rule 23


State 13

	DS -> add .                                         (rule 24)

	dword          reduce using rule 24
	temp           reduce using rule 24
	reg            reduce using rule 24


State 14

	DS -> sub .                                         (rule 25)

	dword          reduce using rule 25
	temp           reduce using rule 25
	reg            reduce using rule 25


State 15

	DS -> shl .                                         (rule 26)

	dword          reduce using rule 26
	temp           reduce using rule 26
	reg            reduce using rule 26


State 16

	DS -> shr .                                         (rule 27)

	dword          reduce using rule 27
	temp           reduce using rule 27
	reg            reduce using rule 27


State 17

	DS -> sal .                                         (rule 28)

	dword          reduce using rule 28
	temp           reduce using rule 28
	reg            reduce using rule 28


State 18

	DS -> sar .                                         (rule 29)

	dword          reduce using rule 29
	temp           reduce using rule 29
	reg            reduce using rule 29


State 19

	DS -> and .                                         (rule 30)

	dword          reduce using rule 30
	temp           reduce using rule 30
	reg            reduce using rule 30


State 20

	DS -> or .                                          (rule 31)

	dword          reduce using rule 31
	temp           reduce using rule 31
	reg            reduce using rule 31


State 21

	DS -> xor .                                         (rule 32)

	dword          reduce using rule 32
	temp           reduce using rule 32
	reg            reduce using rule 32


State 22

	D -> neg .                                          (rule 34)

	dword          reduce using rule 34
	temp           reduce using rule 34
	reg            reduce using rule 34


State 23

	D -> not .                                          (rule 35)

	dword          reduce using rule 35
	temp           reduce using rule 35
	reg            reduce using rule 35


State 24

	D -> inc .                                          (rule 36)

	dword          reduce using rule 36
	temp           reduce using rule 36
	reg            reduce using rule 36


State 25

	D -> dec .                                          (rule 37)

	dword          reduce using rule 37
	temp           reduce using rule 37
	reg            reduce using rule 37


State 26

	D -> pop .                                          (rule 33)

	dword          reduce using rule 33
	temp           reduce using rule 33
	reg            reduce using rule 33


State 27

	Instr -> push . Src                                 (rule 11)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	dword          shift, and enter state 54
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Src            goto state 62
	Dest           goto state 63
	Reg            goto state 53
	Nat            goto state 64
	Int            goto state 65

State 28

	Instr -> imul . Reg ',' Src                         (rule 12)
	Instr -> imul . Dest                                (rule 13)

	dword          shift, and enter state 54
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Dest           goto state 60
	Reg            goto state 61

State 29

	Instr -> idiv . Dest                                (rule 14)

	dword          shift, and enter state 54
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Dest           goto state 59
	Reg            goto state 53

State 30

	Instr -> jmp . label                                (rule 15)

	label          shift, and enter state 58


State 31

	Instr -> lea . Reg ',' dword ptr '[' Addr ']'       (rule 9)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 57

State 32

	Instr -> cmp . Dest ',' Src                         (rule 10)

	dword          shift, and enter state 54
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Dest           goto state 52
	Reg            goto state 53

State 33

	Instr -> cdq .                                      (rule 19)

	mov            reduce using rule 19
	add            reduce using rule 19
	sub            reduce using rule 19
	shl            reduce using rule 19
	shr            reduce using rule 19
	sal            reduce using rule 19
	sar            reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	xor            reduce using rule 19
	neg            reduce using rule 19
	not            reduce using rule 19
	inc            reduce using rule 19
	dec            reduce using rule 19
	pop            reduce using rule 19
	push           reduce using rule 19
	imul           reduce using rule 19
	idiv           reduce using rule 19
	jmp            reduce using rule 19
	lea            reduce using rule 19
	cmp            reduce using rule 19
	cdq            reduce using rule 19
	je             reduce using rule 19
	jne            reduce using rule 19
	jl             reduce using rule 19
	jle            reduce using rule 19
	jg             reduce using rule 19
	jge            reduce using rule 19
	call           reduce using rule 19
	ret            reduce using rule 19
	enter          reduce using rule 19
	leave          reduce using rule 19
	nop            reduce using rule 19
	label          reduce using rule 19
	%eof           reduce using rule 19


State 34

	CJmp -> je .                                        (rule 38)

	label          reduce using rule 38


State 35

	CJmp -> jne .                                       (rule 39)

	label          reduce using rule 39


State 36

	CJmp -> jl .                                        (rule 40)

	label          reduce using rule 40


State 37

	CJmp -> jle .                                       (rule 41)

	label          reduce using rule 41


State 38

	CJmp -> jg .                                        (rule 42)

	label          reduce using rule 42


State 39

	CJmp -> jge .                                       (rule 43)

	label          reduce using rule 43


State 40

	Instr -> call . label                               (rule 17)

	label          shift, and enter state 51


State 41

	Instr -> enter . Nat ',' '0'                        (rule 18)

	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 44

State 42

	Instr -> leave .                                    (rule 20)

	mov            reduce using rule 20
	add            reduce using rule 20
	sub            reduce using rule 20
	shl            reduce using rule 20
	shr            reduce using rule 20
	sal            reduce using rule 20
	sar            reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	xor            reduce using rule 20
	neg            reduce using rule 20
	not            reduce using rule 20
	inc            reduce using rule 20
	dec            reduce using rule 20
	pop            reduce using rule 20
	push           reduce using rule 20
	imul           reduce using rule 20
	idiv           reduce using rule 20
	jmp            reduce using rule 20
	lea            reduce using rule 20
	cmp            reduce using rule 20
	cdq            reduce using rule 20
	je             reduce using rule 20
	jne            reduce using rule 20
	jl             reduce using rule 20
	jle            reduce using rule 20
	jg             reduce using rule 20
	jge            reduce using rule 20
	call           reduce using rule 20
	ret            reduce using rule 20
	enter          reduce using rule 20
	leave          reduce using rule 20
	nop            reduce using rule 20
	label          reduce using rule 20
	%eof           reduce using rule 20


State 43

	Instr -> nop .                                      (rule 21)

	mov            reduce using rule 21
	add            reduce using rule 21
	sub            reduce using rule 21
	shl            reduce using rule 21
	shr            reduce using rule 21
	sal            reduce using rule 21
	sar            reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	xor            reduce using rule 21
	neg            reduce using rule 21
	not            reduce using rule 21
	inc            reduce using rule 21
	dec            reduce using rule 21
	pop            reduce using rule 21
	push           reduce using rule 21
	imul           reduce using rule 21
	idiv           reduce using rule 21
	jmp            reduce using rule 21
	lea            reduce using rule 21
	cmp            reduce using rule 21
	cdq            reduce using rule 21
	je             reduce using rule 21
	jne            reduce using rule 21
	jl             reduce using rule 21
	jle            reduce using rule 21
	jg             reduce using rule 21
	jge            reduce using rule 21
	call           reduce using rule 21
	ret            reduce using rule 21
	enter          reduce using rule 21
	leave          reduce using rule 21
	nop            reduce using rule 21
	label          reduce using rule 21
	%eof           reduce using rule 21


State 44

	Instr -> enter Nat . ',' '0'                        (rule 18)

	','            shift, and enter state 79


State 45

	Nat -> '0' .                                        (rule 96)

	']'            reduce using rule 96
	','            reduce using rule 96
	'+'            reduce using rule 96
	mov            reduce using rule 96
	add            reduce using rule 96
	sub            reduce using rule 96
	shl            reduce using rule 96
	shr            reduce using rule 96
	sal            reduce using rule 96
	sar            reduce using rule 96
	and            reduce using rule 96
	or             reduce using rule 96
	xor            reduce using rule 96
	neg            reduce using rule 96
	not            reduce using rule 96
	inc            reduce using rule 96
	dec            reduce using rule 96
	pop            reduce using rule 96
	push           reduce using rule 96
	imul           reduce using rule 96
	idiv           reduce using rule 96
	jmp            reduce using rule 96
	lea            reduce using rule 96
	cmp            reduce using rule 96
	cdq            reduce using rule 96
	je             reduce using rule 96
	jne            reduce using rule 96
	jl             reduce using rule 96
	jle            reduce using rule 96
	jg             reduce using rule 96
	jge            reduce using rule 96
	call           reduce using rule 96
	ret            reduce using rule 96
	enter          reduce using rule 96
	leave          reduce using rule 96
	nop            reduce using rule 96
	label          reduce using rule 96
	%eof           reduce using rule 96


State 46

	Nat -> '1' .                                        (rule 97)

	']'            reduce using rule 97
	','            reduce using rule 97
	'+'            reduce using rule 97
	mov            reduce using rule 97
	add            reduce using rule 97
	sub            reduce using rule 97
	shl            reduce using rule 97
	shr            reduce using rule 97
	sal            reduce using rule 97
	sar            reduce using rule 97
	and            reduce using rule 97
	or             reduce using rule 97
	xor            reduce using rule 97
	neg            reduce using rule 97
	not            reduce using rule 97
	inc            reduce using rule 97
	dec            reduce using rule 97
	pop            reduce using rule 97
	push           reduce using rule 97
	imul           reduce using rule 97
	idiv           reduce using rule 97
	jmp            reduce using rule 97
	lea            reduce using rule 97
	cmp            reduce using rule 97
	cdq            reduce using rule 97
	je             reduce using rule 97
	jne            reduce using rule 97
	jl             reduce using rule 97
	jle            reduce using rule 97
	jg             reduce using rule 97
	jge            reduce using rule 97
	call           reduce using rule 97
	ret            reduce using rule 97
	enter          reduce using rule 97
	leave          reduce using rule 97
	nop            reduce using rule 97
	label          reduce using rule 97
	%eof           reduce using rule 97


State 47

	Nat -> '2' .                                        (rule 98)

	']'            reduce using rule 98
	','            reduce using rule 98
	'+'            reduce using rule 98
	mov            reduce using rule 98
	add            reduce using rule 98
	sub            reduce using rule 98
	shl            reduce using rule 98
	shr            reduce using rule 98
	sal            reduce using rule 98
	sar            reduce using rule 98
	and            reduce using rule 98
	or             reduce using rule 98
	xor            reduce using rule 98
	neg            reduce using rule 98
	not            reduce using rule 98
	inc            reduce using rule 98
	dec            reduce using rule 98
	pop            reduce using rule 98
	push           reduce using rule 98
	imul           reduce using rule 98
	idiv           reduce using rule 98
	jmp            reduce using rule 98
	lea            reduce using rule 98
	cmp            reduce using rule 98
	cdq            reduce using rule 98
	je             reduce using rule 98
	jne            reduce using rule 98
	jl             reduce using rule 98
	jle            reduce using rule 98
	jg             reduce using rule 98
	jge            reduce using rule 98
	call           reduce using rule 98
	ret            reduce using rule 98
	enter          reduce using rule 98
	leave          reduce using rule 98
	nop            reduce using rule 98
	label          reduce using rule 98
	%eof           reduce using rule 98


State 48

	Nat -> '4' .                                        (rule 99)

	']'            reduce using rule 99
	','            reduce using rule 99
	'+'            reduce using rule 99
	mov            reduce using rule 99
	add            reduce using rule 99
	sub            reduce using rule 99
	shl            reduce using rule 99
	shr            reduce using rule 99
	sal            reduce using rule 99
	sar            reduce using rule 99
	and            reduce using rule 99
	or             reduce using rule 99
	xor            reduce using rule 99
	neg            reduce using rule 99
	not            reduce using rule 99
	inc            reduce using rule 99
	dec            reduce using rule 99
	pop            reduce using rule 99
	push           reduce using rule 99
	imul           reduce using rule 99
	idiv           reduce using rule 99
	jmp            reduce using rule 99
	lea            reduce using rule 99
	cmp            reduce using rule 99
	cdq            reduce using rule 99
	je             reduce using rule 99
	jne            reduce using rule 99
	jl             reduce using rule 99
	jle            reduce using rule 99
	jg             reduce using rule 99
	jge            reduce using rule 99
	call           reduce using rule 99
	ret            reduce using rule 99
	enter          reduce using rule 99
	leave          reduce using rule 99
	nop            reduce using rule 99
	label          reduce using rule 99
	%eof           reduce using rule 99


State 49

	Nat -> '8' .                                        (rule 100)

	']'            reduce using rule 100
	','            reduce using rule 100
	'+'            reduce using rule 100
	mov            reduce using rule 100
	add            reduce using rule 100
	sub            reduce using rule 100
	shl            reduce using rule 100
	shr            reduce using rule 100
	sal            reduce using rule 100
	sar            reduce using rule 100
	and            reduce using rule 100
	or             reduce using rule 100
	xor            reduce using rule 100
	neg            reduce using rule 100
	not            reduce using rule 100
	inc            reduce using rule 100
	dec            reduce using rule 100
	pop            reduce using rule 100
	push           reduce using rule 100
	imul           reduce using rule 100
	idiv           reduce using rule 100
	jmp            reduce using rule 100
	lea            reduce using rule 100
	cmp            reduce using rule 100
	cdq            reduce using rule 100
	je             reduce using rule 100
	jne            reduce using rule 100
	jl             reduce using rule 100
	jle            reduce using rule 100
	jg             reduce using rule 100
	jge            reduce using rule 100
	call           reduce using rule 100
	ret            reduce using rule 100
	enter          reduce using rule 100
	leave          reduce using rule 100
	nop            reduce using rule 100
	label          reduce using rule 100
	%eof           reduce using rule 100


State 50

	Nat -> nat .                                        (rule 101)

	']'            reduce using rule 101
	','            reduce using rule 101
	'+'            reduce using rule 101
	mov            reduce using rule 101
	add            reduce using rule 101
	sub            reduce using rule 101
	shl            reduce using rule 101
	shr            reduce using rule 101
	sal            reduce using rule 101
	sar            reduce using rule 101
	and            reduce using rule 101
	or             reduce using rule 101
	xor            reduce using rule 101
	neg            reduce using rule 101
	not            reduce using rule 101
	inc            reduce using rule 101
	dec            reduce using rule 101
	pop            reduce using rule 101
	push           reduce using rule 101
	imul           reduce using rule 101
	idiv           reduce using rule 101
	jmp            reduce using rule 101
	lea            reduce using rule 101
	cmp            reduce using rule 101
	cdq            reduce using rule 101
	je             reduce using rule 101
	jne            reduce using rule 101
	jl             reduce using rule 101
	jle            reduce using rule 101
	jg             reduce using rule 101
	jge            reduce using rule 101
	call           reduce using rule 101
	ret            reduce using rule 101
	enter          reduce using rule 101
	leave          reduce using rule 101
	nop            reduce using rule 101
	label          reduce using rule 101
	%eof           reduce using rule 101


State 51

	Instr -> call label .                               (rule 17)

	mov            reduce using rule 17
	add            reduce using rule 17
	sub            reduce using rule 17
	shl            reduce using rule 17
	shr            reduce using rule 17
	sal            reduce using rule 17
	sar            reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	xor            reduce using rule 17
	neg            reduce using rule 17
	not            reduce using rule 17
	inc            reduce using rule 17
	dec            reduce using rule 17
	pop            reduce using rule 17
	push           reduce using rule 17
	imul           reduce using rule 17
	idiv           reduce using rule 17
	jmp            reduce using rule 17
	lea            reduce using rule 17
	cmp            reduce using rule 17
	cdq            reduce using rule 17
	je             reduce using rule 17
	jne            reduce using rule 17
	jl             reduce using rule 17
	jle            reduce using rule 17
	jg             reduce using rule 17
	jge            reduce using rule 17
	call           reduce using rule 17
	ret            reduce using rule 17
	enter          reduce using rule 17
	leave          reduce using rule 17
	nop            reduce using rule 17
	label          reduce using rule 17
	%eof           reduce using rule 17


State 52

	Instr -> cmp Dest . ',' Src                         (rule 10)

	','            shift, and enter state 78


State 53

	Dest -> Reg .                                       (rule 46)

	','            reduce using rule 46
	mov            reduce using rule 46
	add            reduce using rule 46
	sub            reduce using rule 46
	shl            reduce using rule 46
	shr            reduce using rule 46
	sal            reduce using rule 46
	sar            reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46
	xor            reduce using rule 46
	neg            reduce using rule 46
	not            reduce using rule 46
	inc            reduce using rule 46
	dec            reduce using rule 46
	pop            reduce using rule 46
	push           reduce using rule 46
	imul           reduce using rule 46
	idiv           reduce using rule 46
	jmp            reduce using rule 46
	lea            reduce using rule 46
	cmp            reduce using rule 46
	cdq            reduce using rule 46
	je             reduce using rule 46
	jne            reduce using rule 46
	jl             reduce using rule 46
	jle            reduce using rule 46
	jg             reduce using rule 46
	jge            reduce using rule 46
	call           reduce using rule 46
	ret            reduce using rule 46
	enter          reduce using rule 46
	leave          reduce using rule 46
	nop            reduce using rule 46
	label          reduce using rule 46
	%eof           reduce using rule 46


State 54

	Dest -> dword . ptr '[' Addr ']'                    (rule 47)

	ptr            shift, and enter state 77


State 55

	Reg -> temp .                                       (rule 49)

	']'            reduce using rule 49
	','            reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	mov            reduce using rule 49
	add            reduce using rule 49
	sub            reduce using rule 49
	shl            reduce using rule 49
	shr            reduce using rule 49
	sal            reduce using rule 49
	sar            reduce using rule 49
	and            reduce using rule 49
	or             reduce using rule 49
	xor            reduce using rule 49
	neg            reduce using rule 49
	not            reduce using rule 49
	inc            reduce using rule 49
	dec            reduce using rule 49
	pop            reduce using rule 49
	push           reduce using rule 49
	imul           reduce using rule 49
	idiv           reduce using rule 49
	jmp            reduce using rule 49
	lea            reduce using rule 49
	cmp            reduce using rule 49
	cdq            reduce using rule 49
	je             reduce using rule 49
	jne            reduce using rule 49
	jl             reduce using rule 49
	jle            reduce using rule 49
	jg             reduce using rule 49
	jge            reduce using rule 49
	call           reduce using rule 49
	ret            reduce using rule 49
	enter          reduce using rule 49
	leave          reduce using rule 49
	nop            reduce using rule 49
	label          reduce using rule 49
	%eof           reduce using rule 49


State 56

	Reg -> reg .                                        (rule 48)

	']'            reduce using rule 48
	','            reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	mov            reduce using rule 48
	add            reduce using rule 48
	sub            reduce using rule 48
	shl            reduce using rule 48
	shr            reduce using rule 48
	sal            reduce using rule 48
	sar            reduce using rule 48
	and            reduce using rule 48
	or             reduce using rule 48
	xor            reduce using rule 48
	neg            reduce using rule 48
	not            reduce using rule 48
	inc            reduce using rule 48
	dec            reduce using rule 48
	pop            reduce using rule 48
	push           reduce using rule 48
	imul           reduce using rule 48
	idiv           reduce using rule 48
	jmp            reduce using rule 48
	lea            reduce using rule 48
	cmp            reduce using rule 48
	cdq            reduce using rule 48
	je             reduce using rule 48
	jne            reduce using rule 48
	jl             reduce using rule 48
	jle            reduce using rule 48
	jg             reduce using rule 48
	jge            reduce using rule 48
	call           reduce using rule 48
	ret            reduce using rule 48
	enter          reduce using rule 48
	leave          reduce using rule 48
	nop            reduce using rule 48
	label          reduce using rule 48
	%eof           reduce using rule 48


State 57

	Instr -> lea Reg . ',' dword ptr '[' Addr ']'       (rule 9)

	','            shift, and enter state 76


State 58

	Instr -> jmp label .                                (rule 15)

	mov            reduce using rule 15
	add            reduce using rule 15
	sub            reduce using rule 15
	shl            reduce using rule 15
	shr            reduce using rule 15
	sal            reduce using rule 15
	sar            reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	xor            reduce using rule 15
	neg            reduce using rule 15
	not            reduce using rule 15
	inc            reduce using rule 15
	dec            reduce using rule 15
	pop            reduce using rule 15
	push           reduce using rule 15
	imul           reduce using rule 15
	idiv           reduce using rule 15
	jmp            reduce using rule 15
	lea            reduce using rule 15
	cmp            reduce using rule 15
	cdq            reduce using rule 15
	je             reduce using rule 15
	jne            reduce using rule 15
	jl             reduce using rule 15
	jle            reduce using rule 15
	jg             reduce using rule 15
	jge            reduce using rule 15
	call           reduce using rule 15
	ret            reduce using rule 15
	enter          reduce using rule 15
	leave          reduce using rule 15
	nop            reduce using rule 15
	label          reduce using rule 15
	%eof           reduce using rule 15


State 59

	Instr -> idiv Dest .                                (rule 14)

	mov            reduce using rule 14
	add            reduce using rule 14
	sub            reduce using rule 14
	shl            reduce using rule 14
	shr            reduce using rule 14
	sal            reduce using rule 14
	sar            reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	xor            reduce using rule 14
	neg            reduce using rule 14
	not            reduce using rule 14
	inc            reduce using rule 14
	dec            reduce using rule 14
	pop            reduce using rule 14
	push           reduce using rule 14
	imul           reduce using rule 14
	idiv           reduce using rule 14
	jmp            reduce using rule 14
	lea            reduce using rule 14
	cmp            reduce using rule 14
	cdq            reduce using rule 14
	je             reduce using rule 14
	jne            reduce using rule 14
	jl             reduce using rule 14
	jle            reduce using rule 14
	jg             reduce using rule 14
	jge            reduce using rule 14
	call           reduce using rule 14
	ret            reduce using rule 14
	enter          reduce using rule 14
	leave          reduce using rule 14
	nop            reduce using rule 14
	label          reduce using rule 14
	%eof           reduce using rule 14


State 60

	Instr -> imul Dest .                                (rule 13)

	mov            reduce using rule 13
	add            reduce using rule 13
	sub            reduce using rule 13
	shl            reduce using rule 13
	shr            reduce using rule 13
	sal            reduce using rule 13
	sar            reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	xor            reduce using rule 13
	neg            reduce using rule 13
	not            reduce using rule 13
	inc            reduce using rule 13
	dec            reduce using rule 13
	pop            reduce using rule 13
	push           reduce using rule 13
	imul           reduce using rule 13
	idiv           reduce using rule 13
	jmp            reduce using rule 13
	lea            reduce using rule 13
	cmp            reduce using rule 13
	cdq            reduce using rule 13
	je             reduce using rule 13
	jne            reduce using rule 13
	jl             reduce using rule 13
	jle            reduce using rule 13
	jg             reduce using rule 13
	jge            reduce using rule 13
	call           reduce using rule 13
	ret            reduce using rule 13
	enter          reduce using rule 13
	leave          reduce using rule 13
	nop            reduce using rule 13
	label          reduce using rule 13
	%eof           reduce using rule 13


State 61

	Instr -> imul Reg . ',' Src                         (rule 12)
	Dest -> Reg .                                       (rule 46)

	','            shift, and enter state 75
	mov            reduce using rule 46
	add            reduce using rule 46
	sub            reduce using rule 46
	shl            reduce using rule 46
	shr            reduce using rule 46
	sal            reduce using rule 46
	sar            reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46
	xor            reduce using rule 46
	neg            reduce using rule 46
	not            reduce using rule 46
	inc            reduce using rule 46
	dec            reduce using rule 46
	pop            reduce using rule 46
	push           reduce using rule 46
	imul           reduce using rule 46
	idiv           reduce using rule 46
	jmp            reduce using rule 46
	lea            reduce using rule 46
	cmp            reduce using rule 46
	cdq            reduce using rule 46
	je             reduce using rule 46
	jne            reduce using rule 46
	jl             reduce using rule 46
	jle            reduce using rule 46
	jg             reduce using rule 46
	jge            reduce using rule 46
	call           reduce using rule 46
	ret            reduce using rule 46
	enter          reduce using rule 46
	leave          reduce using rule 46
	nop            reduce using rule 46
	label          reduce using rule 46
	%eof           reduce using rule 46


State 62

	Instr -> push Src .                                 (rule 11)

	mov            reduce using rule 11
	add            reduce using rule 11
	sub            reduce using rule 11
	shl            reduce using rule 11
	shr            reduce using rule 11
	sal            reduce using rule 11
	sar            reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	xor            reduce using rule 11
	neg            reduce using rule 11
	not            reduce using rule 11
	inc            reduce using rule 11
	dec            reduce using rule 11
	pop            reduce using rule 11
	push           reduce using rule 11
	imul           reduce using rule 11
	idiv           reduce using rule 11
	jmp            reduce using rule 11
	lea            reduce using rule 11
	cmp            reduce using rule 11
	cdq            reduce using rule 11
	je             reduce using rule 11
	jne            reduce using rule 11
	jl             reduce using rule 11
	jle            reduce using rule 11
	jg             reduce using rule 11
	jge            reduce using rule 11
	call           reduce using rule 11
	ret            reduce using rule 11
	enter          reduce using rule 11
	leave          reduce using rule 11
	nop            reduce using rule 11
	label          reduce using rule 11
	%eof           reduce using rule 11


State 63

	Src -> Dest .                                       (rule 45)

	mov            reduce using rule 45
	add            reduce using rule 45
	sub            reduce using rule 45
	shl            reduce using rule 45
	shr            reduce using rule 45
	sal            reduce using rule 45
	sar            reduce using rule 45
	and            reduce using rule 45
	or             reduce using rule 45
	xor            reduce using rule 45
	neg            reduce using rule 45
	not            reduce using rule 45
	inc            reduce using rule 45
	dec            reduce using rule 45
	pop            reduce using rule 45
	push           reduce using rule 45
	imul           reduce using rule 45
	idiv           reduce using rule 45
	jmp            reduce using rule 45
	lea            reduce using rule 45
	cmp            reduce using rule 45
	cdq            reduce using rule 45
	je             reduce using rule 45
	jne            reduce using rule 45
	jl             reduce using rule 45
	jle            reduce using rule 45
	jg             reduce using rule 45
	jge            reduce using rule 45
	call           reduce using rule 45
	ret            reduce using rule 45
	enter          reduce using rule 45
	leave          reduce using rule 45
	nop            reduce using rule 45
	label          reduce using rule 45
	%eof           reduce using rule 45


State 64

	Int -> Nat .                                        (rule 102)

	']'            reduce using rule 102
	'+'            reduce using rule 102
	mov            reduce using rule 102
	add            reduce using rule 102
	sub            reduce using rule 102
	shl            reduce using rule 102
	shr            reduce using rule 102
	sal            reduce using rule 102
	sar            reduce using rule 102
	and            reduce using rule 102
	or             reduce using rule 102
	xor            reduce using rule 102
	neg            reduce using rule 102
	not            reduce using rule 102
	inc            reduce using rule 102
	dec            reduce using rule 102
	pop            reduce using rule 102
	push           reduce using rule 102
	imul           reduce using rule 102
	idiv           reduce using rule 102
	jmp            reduce using rule 102
	lea            reduce using rule 102
	cmp            reduce using rule 102
	cdq            reduce using rule 102
	je             reduce using rule 102
	jne            reduce using rule 102
	jl             reduce using rule 102
	jle            reduce using rule 102
	jg             reduce using rule 102
	jge            reduce using rule 102
	call           reduce using rule 102
	ret            reduce using rule 102
	enter          reduce using rule 102
	leave          reduce using rule 102
	nop            reduce using rule 102
	label          reduce using rule 102
	%eof           reduce using rule 102


State 65

	Src -> Int .                                        (rule 44)

	mov            reduce using rule 44
	add            reduce using rule 44
	sub            reduce using rule 44
	shl            reduce using rule 44
	shr            reduce using rule 44
	sal            reduce using rule 44
	sar            reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44
	xor            reduce using rule 44
	neg            reduce using rule 44
	not            reduce using rule 44
	inc            reduce using rule 44
	dec            reduce using rule 44
	pop            reduce using rule 44
	push           reduce using rule 44
	imul           reduce using rule 44
	idiv           reduce using rule 44
	jmp            reduce using rule 44
	lea            reduce using rule 44
	cmp            reduce using rule 44
	cdq            reduce using rule 44
	je             reduce using rule 44
	jne            reduce using rule 44
	jl             reduce using rule 44
	jle            reduce using rule 44
	jg             reduce using rule 44
	jge            reduce using rule 44
	call           reduce using rule 44
	ret            reduce using rule 44
	enter          reduce using rule 44
	leave          reduce using rule 44
	nop            reduce using rule 44
	label          reduce using rule 44
	%eof           reduce using rule 44


State 66

	Int -> '-' . Nat                                    (rule 103)

	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 74

State 67

	Instr -> CJmp label .                               (rule 16)

	mov            reduce using rule 16
	add            reduce using rule 16
	sub            reduce using rule 16
	shl            reduce using rule 16
	shr            reduce using rule 16
	sal            reduce using rule 16
	sar            reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	xor            reduce using rule 16
	neg            reduce using rule 16
	not            reduce using rule 16
	inc            reduce using rule 16
	dec            reduce using rule 16
	pop            reduce using rule 16
	push           reduce using rule 16
	imul           reduce using rule 16
	idiv           reduce using rule 16
	jmp            reduce using rule 16
	lea            reduce using rule 16
	cmp            reduce using rule 16
	cdq            reduce using rule 16
	je             reduce using rule 16
	jne            reduce using rule 16
	jl             reduce using rule 16
	jle            reduce using rule 16
	jg             reduce using rule 16
	jge            reduce using rule 16
	call           reduce using rule 16
	ret            reduce using rule 16
	enter          reduce using rule 16
	leave          reduce using rule 16
	nop            reduce using rule 16
	label          reduce using rule 16
	%eof           reduce using rule 16


State 68

	Instr -> D Dest .                                   (rule 8)

	mov            reduce using rule 8
	add            reduce using rule 8
	sub            reduce using rule 8
	shl            reduce using rule 8
	shr            reduce using rule 8
	sal            reduce using rule 8
	sar            reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	xor            reduce using rule 8
	neg            reduce using rule 8
	not            reduce using rule 8
	inc            reduce using rule 8
	dec            reduce using rule 8
	pop            reduce using rule 8
	push           reduce using rule 8
	imul           reduce using rule 8
	idiv           reduce using rule 8
	jmp            reduce using rule 8
	lea            reduce using rule 8
	cmp            reduce using rule 8
	cdq            reduce using rule 8
	je             reduce using rule 8
	jne            reduce using rule 8
	jl             reduce using rule 8
	jle            reduce using rule 8
	jg             reduce using rule 8
	jge            reduce using rule 8
	call           reduce using rule 8
	ret            reduce using rule 8
	enter          reduce using rule 8
	leave          reduce using rule 8
	nop            reduce using rule 8
	label          reduce using rule 8
	%eof           reduce using rule 8


State 69

	Instr -> DS Dest . ',' Src                          (rule 7)

	','            shift, and enter state 73


State 70

	IList -> Instr IList .                              (rule 5)

	ret            reduce using rule 5
	%eof           reduce using rule 5


State 71

	Prg -> Label IList ret . Prg                        (rule 3)

	label          shift, and enter state 4
	%eof           reduce using rule 1

	Prg            goto state 72
	Label          goto state 3

State 72

	Prg -> Label IList ret Prg .                        (rule 3)

	%eof           reduce using rule 3


State 73

	Instr -> DS Dest ',' . Src                          (rule 7)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	dword          shift, and enter state 54
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Src            goto state 85
	Dest           goto state 63
	Reg            goto state 53
	Nat            goto state 64
	Int            goto state 65

State 74

	Int -> '-' Nat .                                    (rule 103)

	']'            reduce using rule 103
	'+'            reduce using rule 103
	mov            reduce using rule 103
	add            reduce using rule 103
	sub            reduce using rule 103
	shl            reduce using rule 103
	shr            reduce using rule 103
	sal            reduce using rule 103
	sar            reduce using rule 103
	and            reduce using rule 103
	or             reduce using rule 103
	xor            reduce using rule 103
	neg            reduce using rule 103
	not            reduce using rule 103
	inc            reduce using rule 103
	dec            reduce using rule 103
	pop            reduce using rule 103
	push           reduce using rule 103
	imul           reduce using rule 103
	idiv           reduce using rule 103
	jmp            reduce using rule 103
	lea            reduce using rule 103
	cmp            reduce using rule 103
	cdq            reduce using rule 103
	je             reduce using rule 103
	jne            reduce using rule 103
	jl             reduce using rule 103
	jle            reduce using rule 103
	jg             reduce using rule 103
	jge            reduce using rule 103
	call           reduce using rule 103
	ret            reduce using rule 103
	enter          reduce using rule 103
	leave          reduce using rule 103
	nop            reduce using rule 103
	label          reduce using rule 103
	%eof           reduce using rule 103


State 75

	Instr -> imul Reg ',' . Src                         (rule 12)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	dword          shift, and enter state 54
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Src            goto state 84
	Dest           goto state 63
	Reg            goto state 53
	Nat            goto state 64
	Int            goto state 65

State 76

	Instr -> lea Reg ',' . dword ptr '[' Addr ']'       (rule 9)

	dword          shift, and enter state 83


State 77

	Dest -> dword ptr . '[' Addr ']'                    (rule 47)

	'['            shift, and enter state 82


State 78

	Instr -> cmp Dest ',' . Src                         (rule 10)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	dword          shift, and enter state 54
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Src            goto state 81
	Dest           goto state 63
	Reg            goto state 53
	Nat            goto state 64
	Int            goto state 65

State 79

	Instr -> enter Nat ',' . '0'                        (rule 18)

	'0'            shift, and enter state 80


State 80

	Instr -> enter Nat ',' '0' .                        (rule 18)

	mov            reduce using rule 18
	add            reduce using rule 18
	sub            reduce using rule 18
	shl            reduce using rule 18
	shr            reduce using rule 18
	sal            reduce using rule 18
	sar            reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	xor            reduce using rule 18
	neg            reduce using rule 18
	not            reduce using rule 18
	inc            reduce using rule 18
	dec            reduce using rule 18
	pop            reduce using rule 18
	push           reduce using rule 18
	imul           reduce using rule 18
	idiv           reduce using rule 18
	jmp            reduce using rule 18
	lea            reduce using rule 18
	cmp            reduce using rule 18
	cdq            reduce using rule 18
	je             reduce using rule 18
	jne            reduce using rule 18
	jl             reduce using rule 18
	jle            reduce using rule 18
	jg             reduce using rule 18
	jge            reduce using rule 18
	call           reduce using rule 18
	ret            reduce using rule 18
	enter          reduce using rule 18
	leave          reduce using rule 18
	nop            reduce using rule 18
	label          reduce using rule 18
	%eof           reduce using rule 18


State 81

	Instr -> cmp Dest ',' Src .                         (rule 10)

	mov            reduce using rule 10
	add            reduce using rule 10
	sub            reduce using rule 10
	shl            reduce using rule 10
	shr            reduce using rule 10
	sal            reduce using rule 10
	sar            reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	xor            reduce using rule 10
	neg            reduce using rule 10
	not            reduce using rule 10
	inc            reduce using rule 10
	dec            reduce using rule 10
	pop            reduce using rule 10
	push           reduce using rule 10
	imul           reduce using rule 10
	idiv           reduce using rule 10
	jmp            reduce using rule 10
	lea            reduce using rule 10
	cmp            reduce using rule 10
	cdq            reduce using rule 10
	je             reduce using rule 10
	jne            reduce using rule 10
	jl             reduce using rule 10
	jle            reduce using rule 10
	jg             reduce using rule 10
	jge            reduce using rule 10
	call           reduce using rule 10
	ret            reduce using rule 10
	enter          reduce using rule 10
	leave          reduce using rule 10
	nop            reduce using rule 10
	label          reduce using rule 10
	%eof           reduce using rule 10


State 82

	Dest -> dword ptr '[' . Addr ']'                    (rule 47)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 91
	'2'            shift, and enter state 92
	'4'            shift, and enter state 93
	'8'            shift, and enter state 94
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 87
	Addr           goto state 88
	Scl            goto state 89
	Nat            goto state 64
	Int            goto state 90

State 83

	Instr -> lea Reg ',' dword . ptr '[' Addr ']'       (rule 9)

	ptr            shift, and enter state 86


State 84

	Instr -> imul Reg ',' Src .                         (rule 12)

	mov            reduce using rule 12
	add            reduce using rule 12
	sub            reduce using rule 12
	shl            reduce using rule 12
	shr            reduce using rule 12
	sal            reduce using rule 12
	sar            reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	xor            reduce using rule 12
	neg            reduce using rule 12
	not            reduce using rule 12
	inc            reduce using rule 12
	dec            reduce using rule 12
	pop            reduce using rule 12
	push           reduce using rule 12
	imul           reduce using rule 12
	idiv           reduce using rule 12
	jmp            reduce using rule 12
	lea            reduce using rule 12
	cmp            reduce using rule 12
	cdq            reduce using rule 12
	je             reduce using rule 12
	jne            reduce using rule 12
	jl             reduce using rule 12
	jle            reduce using rule 12
	jg             reduce using rule 12
	jge            reduce using rule 12
	call           reduce using rule 12
	ret            reduce using rule 12
	enter          reduce using rule 12
	leave          reduce using rule 12
	nop            reduce using rule 12
	label          reduce using rule 12
	%eof           reduce using rule 12


State 85

	Instr -> DS Dest ',' Src .                          (rule 7)

	mov            reduce using rule 7
	add            reduce using rule 7
	sub            reduce using rule 7
	shl            reduce using rule 7
	shr            reduce using rule 7
	sal            reduce using rule 7
	sar            reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	xor            reduce using rule 7
	neg            reduce using rule 7
	not            reduce using rule 7
	inc            reduce using rule 7
	dec            reduce using rule 7
	pop            reduce using rule 7
	push           reduce using rule 7
	imul           reduce using rule 7
	idiv           reduce using rule 7
	jmp            reduce using rule 7
	lea            reduce using rule 7
	cmp            reduce using rule 7
	cdq            reduce using rule 7
	je             reduce using rule 7
	jne            reduce using rule 7
	jl             reduce using rule 7
	jle            reduce using rule 7
	jg             reduce using rule 7
	jge            reduce using rule 7
	call           reduce using rule 7
	ret            reduce using rule 7
	enter          reduce using rule 7
	leave          reduce using rule 7
	nop            reduce using rule 7
	label          reduce using rule 7
	%eof           reduce using rule 7


State 86

	Instr -> lea Reg ',' dword ptr . '[' Addr ']'       (rule 9)

	'['            shift, and enter state 101


State 87

	Addr -> Reg .                                       (rule 50)
	Addr -> Reg . '+' Int                               (rule 51)
	Addr -> Reg . '+' Reg                               (rule 52)
	Addr -> Reg . '+' Reg '+' Int                       (rule 54)
	Addr -> Reg . '+' Int '+' Reg                       (rule 55)
	Addr -> Reg . '*' Scl                               (rule 57)
	Addr -> Reg . '*' Scl '+' Int                       (rule 59)
	Addr -> Reg . '*' Scl '+' Reg                       (rule 61)
	Addr -> Reg . '+' Reg '*' Scl                       (rule 65)
	Addr -> Reg . '+' Scl '*' Reg                       (rule 66)
	Addr -> Reg . '*' Scl '+' Int '+' Reg               (rule 67)
	Addr -> Reg . '*' Scl '+' Reg '+' Int               (rule 69)
	Addr -> Reg . '+' Reg '*' Scl '+' Int               (rule 73)
	Addr -> Reg . '+' Scl '*' Reg '+' Int               (rule 74)
	Addr -> Reg . '+' Int '+' Reg '*' Scl               (rule 75)
	Addr -> Reg . '+' Int '+' Scl '*' Reg               (rule 76)
	Addr -> Reg . '-' Int                               (rule 79)
	Addr -> Reg . '+' Reg '-' Int                       (rule 80)
	Addr -> Reg . '-' Int '+' Reg                       (rule 81)
	Addr -> Reg . '*' Scl '-' Int                       (rule 82)
	Addr -> Reg . '*' Scl '-' Int '+' Reg               (rule 84)
	Addr -> Reg . '*' Scl '+' Reg '-' Int               (rule 86)
	Addr -> Reg . '+' Reg '*' Scl '-' Int               (rule 88)
	Addr -> Reg . '+' Scl '*' Reg '-' Int               (rule 89)
	Addr -> Reg . '-' Int '+' Reg '*' Scl               (rule 90)
	Addr -> Reg . '-' Int '+' Scl '*' Reg               (rule 91)

	']'            reduce using rule 50
	'+'            shift, and enter state 98
	'-'            shift, and enter state 99
	'*'            shift, and enter state 100


State 88

	Dest -> dword ptr '[' Addr . ']'                    (rule 47)

	']'            shift, and enter state 97


State 89

	Addr -> Scl . '*' Reg                               (rule 58)
	Addr -> Scl . '*' Reg '+' Int                       (rule 60)
	Addr -> Scl . '*' Reg '+' Reg                       (rule 62)
	Addr -> Scl . '*' Reg '+' Int '+' Reg               (rule 68)
	Addr -> Scl . '*' Reg '+' Reg '+' Int               (rule 70)
	Addr -> Scl . '*' Reg '-' Int                       (rule 83)
	Addr -> Scl . '*' Reg '-' Int '+' Reg               (rule 85)
	Addr -> Scl . '*' Reg '+' Reg '-' Int               (rule 87)

	'*'            shift, and enter state 96


State 90

	Addr -> Int . '+' Reg                               (rule 53)
	Addr -> Int . '+' Reg '+' Reg                       (rule 56)
	Addr -> Int . '+' Reg '*' Scl                       (rule 63)
	Addr -> Int . '+' Scl '*' Reg                       (rule 64)
	Addr -> Int . '+' Reg '*' Scl '+' Reg               (rule 71)
	Addr -> Int . '+' Scl '*' Reg '+' Reg               (rule 72)
	Addr -> Int . '+' Reg '+' Reg '*' Scl               (rule 77)
	Addr -> Int . '+' Reg '+' Scl '*' Reg               (rule 78)

	'+'            shift, and enter state 95


State 91

	Scl -> '1' .                                        (rule 92)
	Nat -> '1' .                                        (rule 97)

	']'            reduce using rule 97
	'+'            reduce using rule 97
	'*'            reduce using rule 92


State 92

	Scl -> '2' .                                        (rule 93)
	Nat -> '2' .                                        (rule 98)

	']'            reduce using rule 98
	'+'            reduce using rule 98
	'*'            reduce using rule 93


State 93

	Scl -> '4' .                                        (rule 94)
	Nat -> '4' .                                        (rule 99)

	']'            reduce using rule 99
	'+'            reduce using rule 99
	'*'            reduce using rule 94


State 94

	Scl -> '8' .                                        (rule 95)
	Nat -> '8' .                                        (rule 100)

	']'            reduce using rule 100
	'+'            reduce using rule 100
	'*'            reduce using rule 95


State 95

	Addr -> Int '+' . Reg                               (rule 53)
	Addr -> Int '+' . Reg '+' Reg                       (rule 56)
	Addr -> Int '+' . Reg '*' Scl                       (rule 63)
	Addr -> Int '+' . Scl '*' Reg                       (rule 64)
	Addr -> Int '+' . Reg '*' Scl '+' Reg               (rule 71)
	Addr -> Int '+' . Scl '*' Reg '+' Reg               (rule 72)
	Addr -> Int '+' . Reg '+' Reg '*' Scl               (rule 77)
	Addr -> Int '+' . Reg '+' Scl '*' Reg               (rule 78)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 113
	Scl            goto state 114

State 96

	Addr -> Scl '*' . Reg                               (rule 58)
	Addr -> Scl '*' . Reg '+' Int                       (rule 60)
	Addr -> Scl '*' . Reg '+' Reg                       (rule 62)
	Addr -> Scl '*' . Reg '+' Int '+' Reg               (rule 68)
	Addr -> Scl '*' . Reg '+' Reg '+' Int               (rule 70)
	Addr -> Scl '*' . Reg '-' Int                       (rule 83)
	Addr -> Scl '*' . Reg '-' Int '+' Reg               (rule 85)
	Addr -> Scl '*' . Reg '+' Reg '-' Int               (rule 87)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 112

State 97

	Dest -> dword ptr '[' Addr ']' .                    (rule 47)

	','            reduce using rule 47
	mov            reduce using rule 47
	add            reduce using rule 47
	sub            reduce using rule 47
	shl            reduce using rule 47
	shr            reduce using rule 47
	sal            reduce using rule 47
	sar            reduce using rule 47
	and            reduce using rule 47
	or             reduce using rule 47
	xor            reduce using rule 47
	neg            reduce using rule 47
	not            reduce using rule 47
	inc            reduce using rule 47
	dec            reduce using rule 47
	pop            reduce using rule 47
	push           reduce using rule 47
	imul           reduce using rule 47
	idiv           reduce using rule 47
	jmp            reduce using rule 47
	lea            reduce using rule 47
	cmp            reduce using rule 47
	cdq            reduce using rule 47
	je             reduce using rule 47
	jne            reduce using rule 47
	jl             reduce using rule 47
	jle            reduce using rule 47
	jg             reduce using rule 47
	jge            reduce using rule 47
	call           reduce using rule 47
	ret            reduce using rule 47
	enter          reduce using rule 47
	leave          reduce using rule 47
	nop            reduce using rule 47
	label          reduce using rule 47
	%eof           reduce using rule 47


State 98

	Addr -> Reg '+' . Int                               (rule 51)
	Addr -> Reg '+' . Reg                               (rule 52)
	Addr -> Reg '+' . Reg '+' Int                       (rule 54)
	Addr -> Reg '+' . Int '+' Reg                       (rule 55)
	Addr -> Reg '+' . Reg '*' Scl                       (rule 65)
	Addr -> Reg '+' . Scl '*' Reg                       (rule 66)
	Addr -> Reg '+' . Reg '*' Scl '+' Int               (rule 73)
	Addr -> Reg '+' . Scl '*' Reg '+' Int               (rule 74)
	Addr -> Reg '+' . Int '+' Reg '*' Scl               (rule 75)
	Addr -> Reg '+' . Int '+' Scl '*' Reg               (rule 76)
	Addr -> Reg '+' . Reg '-' Int                       (rule 80)
	Addr -> Reg '+' . Reg '*' Scl '-' Int               (rule 88)
	Addr -> Reg '+' . Scl '*' Reg '-' Int               (rule 89)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 91
	'2'            shift, and enter state 92
	'4'            shift, and enter state 93
	'8'            shift, and enter state 94
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 109
	Scl            goto state 110
	Nat            goto state 64
	Int            goto state 111

State 99

	Addr -> Reg '-' . Int                               (rule 79)
	Addr -> Reg '-' . Int '+' Reg                       (rule 81)
	Addr -> Reg '-' . Int '+' Reg '*' Scl               (rule 90)
	Addr -> Reg '-' . Int '+' Scl '*' Reg               (rule 91)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 108

State 100

	Addr -> Reg '*' . Scl                               (rule 57)
	Addr -> Reg '*' . Scl '+' Int                       (rule 59)
	Addr -> Reg '*' . Scl '+' Reg                       (rule 61)
	Addr -> Reg '*' . Scl '+' Int '+' Reg               (rule 67)
	Addr -> Reg '*' . Scl '+' Reg '+' Int               (rule 69)
	Addr -> Reg '*' . Scl '-' Int                       (rule 82)
	Addr -> Reg '*' . Scl '-' Int '+' Reg               (rule 84)
	Addr -> Reg '*' . Scl '+' Reg '-' Int               (rule 86)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 103

State 101

	Instr -> lea Reg ',' dword ptr '[' . Addr ']'       (rule 9)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 91
	'2'            shift, and enter state 92
	'4'            shift, and enter state 93
	'8'            shift, and enter state 94
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 87
	Addr           goto state 102
	Scl            goto state 89
	Nat            goto state 64
	Int            goto state 90

State 102

	Instr -> lea Reg ',' dword ptr '[' Addr . ']'       (rule 9)

	']'            shift, and enter state 128


State 103

	Addr -> Reg '*' Scl .                               (rule 57)
	Addr -> Reg '*' Scl . '+' Int                       (rule 59)
	Addr -> Reg '*' Scl . '+' Reg                       (rule 61)
	Addr -> Reg '*' Scl . '+' Int '+' Reg               (rule 67)
	Addr -> Reg '*' Scl . '+' Reg '+' Int               (rule 69)
	Addr -> Reg '*' Scl . '-' Int                       (rule 82)
	Addr -> Reg '*' Scl . '-' Int '+' Reg               (rule 84)
	Addr -> Reg '*' Scl . '+' Reg '-' Int               (rule 86)

	']'            reduce using rule 57
	'+'            shift, and enter state 126
	'-'            shift, and enter state 127


State 104

	Scl -> '1' .                                        (rule 92)

	']'            reduce using rule 92
	'+'            reduce using rule 92
	'-'            reduce using rule 92
	'*'            reduce using rule 92


State 105

	Scl -> '2' .                                        (rule 93)

	']'            reduce using rule 93
	'+'            reduce using rule 93
	'-'            reduce using rule 93
	'*'            reduce using rule 93


State 106

	Scl -> '4' .                                        (rule 94)

	']'            reduce using rule 94
	'+'            reduce using rule 94
	'-'            reduce using rule 94
	'*'            reduce using rule 94


State 107

	Scl -> '8' .                                        (rule 95)

	']'            reduce using rule 95
	'+'            reduce using rule 95
	'-'            reduce using rule 95
	'*'            reduce using rule 95


State 108

	Addr -> Reg '-' Int .                               (rule 79)
	Addr -> Reg '-' Int . '+' Reg                       (rule 81)
	Addr -> Reg '-' Int . '+' Reg '*' Scl               (rule 90)
	Addr -> Reg '-' Int . '+' Scl '*' Reg               (rule 91)

	']'            reduce using rule 79
	'+'            shift, and enter state 125


State 109

	Addr -> Reg '+' Reg .                               (rule 52)
	Addr -> Reg '+' Reg . '+' Int                       (rule 54)
	Addr -> Reg '+' Reg . '*' Scl                       (rule 65)
	Addr -> Reg '+' Reg . '*' Scl '+' Int               (rule 73)
	Addr -> Reg '+' Reg . '-' Int                       (rule 80)
	Addr -> Reg '+' Reg . '*' Scl '-' Int               (rule 88)

	']'            reduce using rule 52
	'+'            shift, and enter state 122
	'-'            shift, and enter state 123
	'*'            shift, and enter state 124


State 110

	Addr -> Reg '+' Scl . '*' Reg                       (rule 66)
	Addr -> Reg '+' Scl . '*' Reg '+' Int               (rule 74)
	Addr -> Reg '+' Scl . '*' Reg '-' Int               (rule 89)

	'*'            shift, and enter state 121


State 111

	Addr -> Reg '+' Int .                               (rule 51)
	Addr -> Reg '+' Int . '+' Reg                       (rule 55)
	Addr -> Reg '+' Int . '+' Reg '*' Scl               (rule 75)
	Addr -> Reg '+' Int . '+' Scl '*' Reg               (rule 76)

	']'            reduce using rule 51
	'+'            shift, and enter state 120


State 112

	Addr -> Scl '*' Reg .                               (rule 58)
	Addr -> Scl '*' Reg . '+' Int                       (rule 60)
	Addr -> Scl '*' Reg . '+' Reg                       (rule 62)
	Addr -> Scl '*' Reg . '+' Int '+' Reg               (rule 68)
	Addr -> Scl '*' Reg . '+' Reg '+' Int               (rule 70)
	Addr -> Scl '*' Reg . '-' Int                       (rule 83)
	Addr -> Scl '*' Reg . '-' Int '+' Reg               (rule 85)
	Addr -> Scl '*' Reg . '+' Reg '-' Int               (rule 87)

	']'            reduce using rule 58
	'+'            shift, and enter state 118
	'-'            shift, and enter state 119


State 113

	Addr -> Int '+' Reg .                               (rule 53)
	Addr -> Int '+' Reg . '+' Reg                       (rule 56)
	Addr -> Int '+' Reg . '*' Scl                       (rule 63)
	Addr -> Int '+' Reg . '*' Scl '+' Reg               (rule 71)
	Addr -> Int '+' Reg . '+' Reg '*' Scl               (rule 77)
	Addr -> Int '+' Reg . '+' Scl '*' Reg               (rule 78)

	']'            reduce using rule 53
	'+'            shift, and enter state 116
	'*'            shift, and enter state 117


State 114

	Addr -> Int '+' Scl . '*' Reg                       (rule 64)
	Addr -> Int '+' Scl . '*' Reg '+' Reg               (rule 72)

	'*'            shift, and enter state 115


State 115

	Addr -> Int '+' Scl '*' . Reg                       (rule 64)
	Addr -> Int '+' Scl '*' . Reg '+' Reg               (rule 72)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 146

State 116

	Addr -> Int '+' Reg '+' . Reg                       (rule 56)
	Addr -> Int '+' Reg '+' . Reg '*' Scl               (rule 77)
	Addr -> Int '+' Reg '+' . Scl '*' Reg               (rule 78)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 144
	Scl            goto state 145

State 117

	Addr -> Int '+' Reg '*' . Scl                       (rule 63)
	Addr -> Int '+' Reg '*' . Scl '+' Reg               (rule 71)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 143

State 118

	Addr -> Scl '*' Reg '+' . Int                       (rule 60)
	Addr -> Scl '*' Reg '+' . Reg                       (rule 62)
	Addr -> Scl '*' Reg '+' . Int '+' Reg               (rule 68)
	Addr -> Scl '*' Reg '+' . Reg '+' Int               (rule 70)
	Addr -> Scl '*' Reg '+' . Reg '-' Int               (rule 87)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 141
	Nat            goto state 64
	Int            goto state 142

State 119

	Addr -> Scl '*' Reg '-' . Int                       (rule 83)
	Addr -> Scl '*' Reg '-' . Int '+' Reg               (rule 85)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 140

State 120

	Addr -> Reg '+' Int '+' . Reg                       (rule 55)
	Addr -> Reg '+' Int '+' . Reg '*' Scl               (rule 75)
	Addr -> Reg '+' Int '+' . Scl '*' Reg               (rule 76)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 138
	Scl            goto state 139

State 121

	Addr -> Reg '+' Scl '*' . Reg                       (rule 66)
	Addr -> Reg '+' Scl '*' . Reg '+' Int               (rule 74)
	Addr -> Reg '+' Scl '*' . Reg '-' Int               (rule 89)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 137

State 122

	Addr -> Reg '+' Reg '+' . Int                       (rule 54)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 136

State 123

	Addr -> Reg '+' Reg '-' . Int                       (rule 80)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 135

State 124

	Addr -> Reg '+' Reg '*' . Scl                       (rule 65)
	Addr -> Reg '+' Reg '*' . Scl '+' Int               (rule 73)
	Addr -> Reg '+' Reg '*' . Scl '-' Int               (rule 88)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 134

State 125

	Addr -> Reg '-' Int '+' . Reg                       (rule 81)
	Addr -> Reg '-' Int '+' . Reg '*' Scl               (rule 90)
	Addr -> Reg '-' Int '+' . Scl '*' Reg               (rule 91)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 132
	Scl            goto state 133

State 126

	Addr -> Reg '*' Scl '+' . Int                       (rule 59)
	Addr -> Reg '*' Scl '+' . Reg                       (rule 61)
	Addr -> Reg '*' Scl '+' . Int '+' Reg               (rule 67)
	Addr -> Reg '*' Scl '+' . Reg '+' Int               (rule 69)
	Addr -> Reg '*' Scl '+' . Reg '-' Int               (rule 86)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50
	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 130
	Nat            goto state 64
	Int            goto state 131

State 127

	Addr -> Reg '*' Scl '-' . Int                       (rule 82)
	Addr -> Reg '*' Scl '-' . Int '+' Reg               (rule 84)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 129

State 128

	Instr -> lea Reg ',' dword ptr '[' Addr ']' .       (rule 9)

	mov            reduce using rule 9
	add            reduce using rule 9
	sub            reduce using rule 9
	shl            reduce using rule 9
	shr            reduce using rule 9
	sal            reduce using rule 9
	sar            reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	xor            reduce using rule 9
	neg            reduce using rule 9
	not            reduce using rule 9
	inc            reduce using rule 9
	dec            reduce using rule 9
	pop            reduce using rule 9
	push           reduce using rule 9
	imul           reduce using rule 9
	idiv           reduce using rule 9
	jmp            reduce using rule 9
	lea            reduce using rule 9
	cmp            reduce using rule 9
	cdq            reduce using rule 9
	je             reduce using rule 9
	jne            reduce using rule 9
	jl             reduce using rule 9
	jle            reduce using rule 9
	jg             reduce using rule 9
	jge            reduce using rule 9
	call           reduce using rule 9
	ret            reduce using rule 9
	enter          reduce using rule 9
	leave          reduce using rule 9
	nop            reduce using rule 9
	label          reduce using rule 9
	%eof           reduce using rule 9


State 129

	Addr -> Reg '*' Scl '-' Int .                       (rule 82)
	Addr -> Reg '*' Scl '-' Int . '+' Reg               (rule 84)

	']'            reduce using rule 82
	'+'            shift, and enter state 166


State 130

	Addr -> Reg '*' Scl '+' Reg .                       (rule 61)
	Addr -> Reg '*' Scl '+' Reg . '+' Int               (rule 69)
	Addr -> Reg '*' Scl '+' Reg . '-' Int               (rule 86)

	']'            reduce using rule 61
	'+'            shift, and enter state 164
	'-'            shift, and enter state 165


State 131

	Addr -> Reg '*' Scl '+' Int .                       (rule 59)
	Addr -> Reg '*' Scl '+' Int . '+' Reg               (rule 67)

	']'            reduce using rule 59
	'+'            shift, and enter state 163


State 132

	Addr -> Reg '-' Int '+' Reg .                       (rule 81)
	Addr -> Reg '-' Int '+' Reg . '*' Scl               (rule 90)

	']'            reduce using rule 81
	'*'            shift, and enter state 162


State 133

	Addr -> Reg '-' Int '+' Scl . '*' Reg               (rule 91)

	'*'            shift, and enter state 161


State 134

	Addr -> Reg '+' Reg '*' Scl .                       (rule 65)
	Addr -> Reg '+' Reg '*' Scl . '+' Int               (rule 73)
	Addr -> Reg '+' Reg '*' Scl . '-' Int               (rule 88)

	']'            reduce using rule 65
	'+'            shift, and enter state 159
	'-'            shift, and enter state 160


State 135

	Addr -> Reg '+' Reg '-' Int .                       (rule 80)

	']'            reduce using rule 80


State 136

	Addr -> Reg '+' Reg '+' Int .                       (rule 54)

	']'            reduce using rule 54


State 137

	Addr -> Reg '+' Scl '*' Reg .                       (rule 66)
	Addr -> Reg '+' Scl '*' Reg . '+' Int               (rule 74)
	Addr -> Reg '+' Scl '*' Reg . '-' Int               (rule 89)

	']'            reduce using rule 66
	'+'            shift, and enter state 157
	'-'            shift, and enter state 158


State 138

	Addr -> Reg '+' Int '+' Reg .                       (rule 55)
	Addr -> Reg '+' Int '+' Reg . '*' Scl               (rule 75)

	']'            reduce using rule 55
	'*'            shift, and enter state 156


State 139

	Addr -> Reg '+' Int '+' Scl . '*' Reg               (rule 76)

	'*'            shift, and enter state 155


State 140

	Addr -> Scl '*' Reg '-' Int .                       (rule 83)
	Addr -> Scl '*' Reg '-' Int . '+' Reg               (rule 85)

	']'            reduce using rule 83
	'+'            shift, and enter state 154


State 141

	Addr -> Scl '*' Reg '+' Reg .                       (rule 62)
	Addr -> Scl '*' Reg '+' Reg . '+' Int               (rule 70)
	Addr -> Scl '*' Reg '+' Reg . '-' Int               (rule 87)

	']'            reduce using rule 62
	'+'            shift, and enter state 152
	'-'            shift, and enter state 153


State 142

	Addr -> Scl '*' Reg '+' Int .                       (rule 60)
	Addr -> Scl '*' Reg '+' Int . '+' Reg               (rule 68)

	']'            reduce using rule 60
	'+'            shift, and enter state 151


State 143

	Addr -> Int '+' Reg '*' Scl .                       (rule 63)
	Addr -> Int '+' Reg '*' Scl . '+' Reg               (rule 71)

	']'            reduce using rule 63
	'+'            shift, and enter state 150


State 144

	Addr -> Int '+' Reg '+' Reg .                       (rule 56)
	Addr -> Int '+' Reg '+' Reg . '*' Scl               (rule 77)

	']'            reduce using rule 56
	'*'            shift, and enter state 149


State 145

	Addr -> Int '+' Reg '+' Scl . '*' Reg               (rule 78)

	'*'            shift, and enter state 148


State 146

	Addr -> Int '+' Scl '*' Reg .                       (rule 64)
	Addr -> Int '+' Scl '*' Reg . '+' Reg               (rule 72)

	']'            reduce using rule 64
	'+'            shift, and enter state 147


State 147

	Addr -> Int '+' Scl '*' Reg '+' . Reg               (rule 72)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 186

State 148

	Addr -> Int '+' Reg '+' Scl '*' . Reg               (rule 78)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 185

State 149

	Addr -> Int '+' Reg '+' Reg '*' . Scl               (rule 77)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 184

State 150

	Addr -> Int '+' Reg '*' Scl '+' . Reg               (rule 71)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 183

State 151

	Addr -> Scl '*' Reg '+' Int '+' . Reg               (rule 68)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 182

State 152

	Addr -> Scl '*' Reg '+' Reg '+' . Int               (rule 70)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 181

State 153

	Addr -> Scl '*' Reg '+' Reg '-' . Int               (rule 87)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 180

State 154

	Addr -> Scl '*' Reg '-' Int '+' . Reg               (rule 85)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 179

State 155

	Addr -> Reg '+' Int '+' Scl '*' . Reg               (rule 76)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 178

State 156

	Addr -> Reg '+' Int '+' Reg '*' . Scl               (rule 75)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 177

State 157

	Addr -> Reg '+' Scl '*' Reg '+' . Int               (rule 74)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 176

State 158

	Addr -> Reg '+' Scl '*' Reg '-' . Int               (rule 89)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 175

State 159

	Addr -> Reg '+' Reg '*' Scl '+' . Int               (rule 73)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 174

State 160

	Addr -> Reg '+' Reg '*' Scl '-' . Int               (rule 88)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 173

State 161

	Addr -> Reg '-' Int '+' Scl '*' . Reg               (rule 91)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 172

State 162

	Addr -> Reg '-' Int '+' Reg '*' . Scl               (rule 90)

	'1'            shift, and enter state 104
	'2'            shift, and enter state 105
	'4'            shift, and enter state 106
	'8'            shift, and enter state 107

	Scl            goto state 171

State 163

	Addr -> Reg '*' Scl '+' Int '+' . Reg               (rule 67)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 170

State 164

	Addr -> Reg '*' Scl '+' Reg '+' . Int               (rule 69)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 169

State 165

	Addr -> Reg '*' Scl '+' Reg '-' . Int               (rule 86)

	'-'            shift, and enter state 66
	'0'            shift, and enter state 45
	'1'            shift, and enter state 46
	'2'            shift, and enter state 47
	'4'            shift, and enter state 48
	'8'            shift, and enter state 49
	nat            shift, and enter state 50

	Nat            goto state 64
	Int            goto state 168

State 166

	Addr -> Reg '*' Scl '-' Int '+' . Reg               (rule 84)

	temp           shift, and enter state 55
	reg            shift, and enter state 56

	Reg            goto state 167

State 167

	Addr -> Reg '*' Scl '-' Int '+' Reg .               (rule 84)

	']'            reduce using rule 84


State 168

	Addr -> Reg '*' Scl '+' Reg '-' Int .               (rule 86)

	']'            reduce using rule 86


State 169

	Addr -> Reg '*' Scl '+' Reg '+' Int .               (rule 69)

	']'            reduce using rule 69


State 170

	Addr -> Reg '*' Scl '+' Int '+' Reg .               (rule 67)

	']'            reduce using rule 67


State 171

	Addr -> Reg '-' Int '+' Reg '*' Scl .               (rule 90)

	']'            reduce using rule 90


State 172

	Addr -> Reg '-' Int '+' Scl '*' Reg .               (rule 91)

	']'            reduce using rule 91


State 173

	Addr -> Reg '+' Reg '*' Scl '-' Int .               (rule 88)

	']'            reduce using rule 88


State 174

	Addr -> Reg '+' Reg '*' Scl '+' Int .               (rule 73)

	']'            reduce using rule 73


State 175

	Addr -> Reg '+' Scl '*' Reg '-' Int .               (rule 89)

	']'            reduce using rule 89


State 176

	Addr -> Reg '+' Scl '*' Reg '+' Int .               (rule 74)

	']'            reduce using rule 74


State 177

	Addr -> Reg '+' Int '+' Reg '*' Scl .               (rule 75)

	']'            reduce using rule 75


State 178

	Addr -> Reg '+' Int '+' Scl '*' Reg .               (rule 76)

	']'            reduce using rule 76


State 179

	Addr -> Scl '*' Reg '-' Int '+' Reg .               (rule 85)

	']'            reduce using rule 85


State 180

	Addr -> Scl '*' Reg '+' Reg '-' Int .               (rule 87)

	']'            reduce using rule 87


State 181

	Addr -> Scl '*' Reg '+' Reg '+' Int .               (rule 70)

	']'            reduce using rule 70


State 182

	Addr -> Scl '*' Reg '+' Int '+' Reg .               (rule 68)

	']'            reduce using rule 68


State 183

	Addr -> Int '+' Reg '*' Scl '+' Reg .               (rule 71)

	']'            reduce using rule 71


State 184

	Addr -> Int '+' Reg '+' Reg '*' Scl .               (rule 77)

	']'            reduce using rule 77


State 185

	Addr -> Int '+' Reg '+' Scl '*' Reg .               (rule 78)

	']'            reduce using rule 78


State 186

	Addr -> Int '+' Scl '*' Reg '+' Reg .               (rule 72)

	']'            reduce using rule 72


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 104
Number of terminals: 51
Number of non-terminals: 15
Number of states: 187
